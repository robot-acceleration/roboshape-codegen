from URDFParser import URDFParser
from FPGACodegen import FPGACodegen
from util import VerilogWriter, FileManager
from rbd_config import dim_list, urdf_file

#---------------------------------------------

parser = URDFParser()
robot = parser.parse(urdf_file)
fpga_codegen = FPGACodegen(robot)

#-------- urdf attrs needed for codegen-ing this file ----------------

num_links = robot.get_num_links_effective()
xform_bools_full = fpga_codegen.get_Xmat_sparsity_boolean_matrix_OR()
xform_bools = fpga_codegen.left_half_matrix(xform_bools_full)

#-------- File management -------------------

fm = FileManager("dqfpijx.v")
output_file_path = fm.get_output_file_path()
dqfpijx_file = open(output_file_path, "w")

vw = VerilogWriter(dqfpijx_file, dim_list, num_links)

#--------- Setting commonly used bitwidths -----

# Find Bitwidth of # Links
bitwidth_num_links = vw.get_bitwidth(num_links)

#---------------------------------------------

############

vw.writeLine("`timescale 1ns / 1ps")
vw.writeLine("")
vw.writeLine("// dq Forward Pass for Link i Input j")
vw.writeLine("")
vw.writeLine("//------------------------------------------------------------------------------")
vw.writeLine("// dqfpijx Module")
vw.writeLine("//------------------------------------------------------------------------------")
vw.writeLine("module dqfpijx#(parameter WIDTH = 32,parameter DECIMAL_BITS = 16)(")
vw.writeLine("   // clock")
vw.writeLine("   input clk,")
vw.writeLine("   // reset")
vw.writeLine("   input reset,")
vw.writeLine("   // state_reg")
vw.writeLine("   input  [2:0]")
vw.writeLine("      state_reg,")
vw.writeLine("   // stage booleans")
vw.writeLine("   input")
vw.writeLine("      s1_bool_in,s2_bool_in,s3_bool_in,")
vw.writeLine("   // link_in")
vw.writeLine("   input  ["+str(vw.get_bitwidth_array_def(num_links))+":0]")
vw.writeLine("      link_in,")
vw.writeLine("   // sin(q) and cos(q)")
vw.writeLine("   input  signed[(WIDTH-1):0]")
vw.writeLine("      sinq_val_in,cosq_val_in,")
vw.writeLine("   // qd_val_in")
vw.writeLine("   input  signed[(WIDTH-1):0]")
vw.writeLine("      qd_val_in,")
vw.writeLine("   // v_curr_vec_in, 6 values")
vw.writeLine("   input  signed[(WIDTH-1):0]")
vw.writeLine("      v_curr_vec_in_AX,v_curr_vec_in_AY,v_curr_vec_in_AZ,v_curr_vec_in_LX,v_curr_vec_in_LY,v_curr_vec_in_LZ,")
vw.writeLine("   // a_curr_vec_in, 6 values")
vw.writeLine("   input  signed[(WIDTH-1):0]")
vw.writeLine("      a_curr_vec_in_AX,a_curr_vec_in_AY,a_curr_vec_in_AZ,a_curr_vec_in_LX,a_curr_vec_in_LY,a_curr_vec_in_LZ,")
vw.writeLine("   // v_prev_vec_in, 6 values")
vw.writeLine("   input  signed[(WIDTH-1):0]")
vw.writeLine("      v_prev_vec_in_AX,v_prev_vec_in_AY,v_prev_vec_in_AZ,v_prev_vec_in_LX,v_prev_vec_in_LY,v_prev_vec_in_LZ,")
vw.writeLine("   // a_prev_vec_in, 6 values")
vw.writeLine("   input  signed[(WIDTH-1):0]")
vw.writeLine("      a_prev_vec_in_AX,a_prev_vec_in_AY,a_prev_vec_in_AZ,a_prev_vec_in_LX,a_prev_vec_in_LY,a_prev_vec_in_LZ,")
vw.writeLine("   // mcross boolean")
vw.writeLine("   input  mcross,")
vw.writeLine("   // dfdq_curr_vec_out, 6 values")
vw.writeLine("   output signed[(WIDTH-1):0]")
vw.writeLine("      dfdq_curr_vec_out_AX,dfdq_curr_vec_out_AY,dfdq_curr_vec_out_AZ,dfdq_curr_vec_out_LX,dfdq_curr_vec_out_LY,dfdq_curr_vec_out_LZ")
vw.writeLine("   );")
vw.writeLine("")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // internal wires and state")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // registers")
vw.writeLine("   reg signed[(WIDTH-1):0]")
vw.writeLine("      dadq_prev_vec_reg_AX,dadq_prev_vec_reg_AY,dadq_prev_vec_reg_AZ,dadq_prev_vec_reg_LX,dadq_prev_vec_reg_LY,dadq_prev_vec_reg_LZ,")
vw.writeLine("      dvdq_prev_vec_reg_AX,dvdq_prev_vec_reg_AY,dvdq_prev_vec_reg_AZ,dvdq_prev_vec_reg_LX,dvdq_prev_vec_reg_LY,dvdq_prev_vec_reg_LZ;")
vw.writeLine("   // next")
vw.writeLine("   wire signed[(WIDTH-1):0]")
vw.writeLine("      dadq_prev_vec_next_AX,dadq_prev_vec_next_AY,dadq_prev_vec_next_AZ,dadq_prev_vec_next_LX,dadq_prev_vec_next_LY,dadq_prev_vec_next_LZ,")
vw.writeLine("      dvdq_prev_vec_next_AX,dvdq_prev_vec_next_AY,dvdq_prev_vec_next_AZ,dvdq_prev_vec_next_LX,dvdq_prev_vec_next_LY,dvdq_prev_vec_next_LZ;")
vw.writeLine("   wire signed[(WIDTH-1):0]")
vw.writeLine("      dadq_curr_vec_out_AX,dadq_curr_vec_out_AY,dadq_curr_vec_out_AZ,dadq_curr_vec_out_LX,dadq_curr_vec_out_LY,dadq_curr_vec_out_LZ,")
vw.writeLine("      dvdq_curr_vec_out_AX,dvdq_curr_vec_out_AY,dvdq_curr_vec_out_AZ,dvdq_curr_vec_out_LX,dvdq_curr_vec_out_LY,dvdq_curr_vec_out_LZ;")
vw.writeLine("   // mux")
vw.writeLine("   wire signed[(WIDTH-1):0]")
vw.writeLine("      dadq_prev_vec_mux_AX,dadq_prev_vec_mux_AY,dadq_prev_vec_mux_AZ,dadq_prev_vec_mux_LX,dadq_prev_vec_mux_LY,dadq_prev_vec_mux_LZ,")
vw.writeLine("      dvdq_prev_vec_mux_AX,dvdq_prev_vec_mux_AY,dvdq_prev_vec_mux_AZ,dvdq_prev_vec_mux_LX,dvdq_prev_vec_mux_LY,dvdq_prev_vec_mux_LZ;")
vw.writeLine("   // mcross")
vw.writeLine("   wire signed[(WIDTH-1):0]")
vw.writeLine("      vordv_prev_vec_mux_AX,vordv_prev_vec_mux_AY,vordv_prev_vec_mux_AZ,vordv_prev_vec_mux_LX,vordv_prev_vec_mux_LY,vordv_prev_vec_mux_LZ,")
vw.writeLine("      aorda_prev_vec_mux_AX,aorda_prev_vec_mux_AY,aorda_prev_vec_mux_AZ,aorda_prev_vec_mux_LX,aorda_prev_vec_mux_LY,aorda_prev_vec_mux_LZ;")
vw.writeLine("")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // internal assignments")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // da/dq prev")
vw.writeLine("   assign dadq_prev_vec_next_AX = (state_reg == 3'd3) ? dadq_curr_vec_out_AX : dadq_prev_vec_reg_AX;")
vw.writeLine("   assign dadq_prev_vec_next_AY = (state_reg == 3'd3) ? dadq_curr_vec_out_AY : dadq_prev_vec_reg_AY;")
vw.writeLine("   assign dadq_prev_vec_next_AZ = (state_reg == 3'd3) ? dadq_curr_vec_out_AZ : dadq_prev_vec_reg_AZ;")
vw.writeLine("   assign dadq_prev_vec_next_LX = (state_reg == 3'd3) ? dadq_curr_vec_out_LX : dadq_prev_vec_reg_LX;")
vw.writeLine("   assign dadq_prev_vec_next_LY = (state_reg == 3'd3) ? dadq_curr_vec_out_LY : dadq_prev_vec_reg_LY;")
vw.writeLine("   assign dadq_prev_vec_next_LZ = (state_reg == 3'd3) ? dadq_curr_vec_out_LZ : dadq_prev_vec_reg_LZ;")
vw.writeLine("   // dv/dq prev")
vw.writeLine("   assign dvdq_prev_vec_next_AX = (state_reg == 3'd3) ? dvdq_curr_vec_out_AX : dvdq_prev_vec_reg_AX;")
vw.writeLine("   assign dvdq_prev_vec_next_AY = (state_reg == 3'd3) ? dvdq_curr_vec_out_AY : dvdq_prev_vec_reg_AY;")
vw.writeLine("   assign dvdq_prev_vec_next_AZ = (state_reg == 3'd3) ? dvdq_curr_vec_out_AZ : dvdq_prev_vec_reg_AZ;")
vw.writeLine("   assign dvdq_prev_vec_next_LX = (state_reg == 3'd3) ? dvdq_curr_vec_out_LX : dvdq_prev_vec_reg_LX;")
vw.writeLine("   assign dvdq_prev_vec_next_LY = (state_reg == 3'd3) ? dvdq_curr_vec_out_LY : dvdq_prev_vec_reg_LY;")
vw.writeLine("   assign dvdq_prev_vec_next_LZ = (state_reg == 3'd3) ? dvdq_curr_vec_out_LZ : dvdq_prev_vec_reg_LZ;")
vw.writeLine("")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // internal registers")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   always @ (posedge clk or posedge reset)")
vw.writeLine("   begin")
vw.writeLine("      if (reset)")
vw.writeLine("      begin")
vw.writeLine("         // da/dq prev")
vw.writeLine("         dadq_prev_vec_reg_AX <= 32'd0;")
vw.writeLine("         dadq_prev_vec_reg_AY <= 32'd0;")
vw.writeLine("         dadq_prev_vec_reg_AZ <= 32'd0;")
vw.writeLine("         dadq_prev_vec_reg_LX <= 32'd0;")
vw.writeLine("         dadq_prev_vec_reg_LY <= 32'd0;")
vw.writeLine("         dadq_prev_vec_reg_LZ <= 32'd0;")
vw.writeLine("         // dv/dq prev")
vw.writeLine("         dvdq_prev_vec_reg_AX <= 32'd0;")
vw.writeLine("         dvdq_prev_vec_reg_AY <= 32'd0;")
vw.writeLine("         dvdq_prev_vec_reg_AZ <= 32'd0;")
vw.writeLine("         dvdq_prev_vec_reg_LX <= 32'd0;")
vw.writeLine("         dvdq_prev_vec_reg_LY <= 32'd0;")
vw.writeLine("         dvdq_prev_vec_reg_LZ <= 32'd0;")
vw.writeLine("      end")
vw.writeLine("      else")
vw.writeLine("      begin")
vw.writeLine("         // da/dq prev")
vw.writeLine("         dadq_prev_vec_reg_AX <= dadq_prev_vec_next_AX;")
vw.writeLine("         dadq_prev_vec_reg_AY <= dadq_prev_vec_next_AY;")
vw.writeLine("         dadq_prev_vec_reg_AZ <= dadq_prev_vec_next_AZ;")
vw.writeLine("         dadq_prev_vec_reg_LX <= dadq_prev_vec_next_LX;")
vw.writeLine("         dadq_prev_vec_reg_LY <= dadq_prev_vec_next_LY;")
vw.writeLine("         dadq_prev_vec_reg_LZ <= dadq_prev_vec_next_LZ;")
vw.writeLine("         // dv/dq prev")
vw.writeLine("         dvdq_prev_vec_reg_AX <= dvdq_prev_vec_next_AX;")
vw.writeLine("         dvdq_prev_vec_reg_AY <= dvdq_prev_vec_next_AY;")
vw.writeLine("         dvdq_prev_vec_reg_AZ <= dvdq_prev_vec_next_AZ;")
vw.writeLine("         dvdq_prev_vec_reg_LX <= dvdq_prev_vec_next_LX;")
vw.writeLine("         dvdq_prev_vec_reg_LY <= dvdq_prev_vec_next_LY;")
vw.writeLine("         dvdq_prev_vec_reg_LZ <= dvdq_prev_vec_next_LZ;")
vw.writeLine("      end")
vw.writeLine("   end")
vw.writeLine("")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // input muxes")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // dvdq prev")
vw.writeLine("   assign dvdq_prev_vec_mux_AX = (link_in == {bitwidth}'d1) ? 32'd0 : dvdq_prev_vec_reg_AX;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dvdq_prev_vec_mux_AY = (link_in == {bitwidth}'d1) ? 32'd0 : dvdq_prev_vec_reg_AY;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dvdq_prev_vec_mux_AZ = (link_in == {bitwidth}'d1) ? 32'd0 : dvdq_prev_vec_reg_AZ;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dvdq_prev_vec_mux_LX = (link_in == {bitwidth}'d1) ? 32'd0 : dvdq_prev_vec_reg_LX;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dvdq_prev_vec_mux_LY = (link_in == {bitwidth}'d1) ? 32'd0 : dvdq_prev_vec_reg_LY;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dvdq_prev_vec_mux_LZ = (link_in == {bitwidth}'d1) ? 32'd0 : dvdq_prev_vec_reg_LZ;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   // dadq prev")
vw.writeLine("   assign dadq_prev_vec_mux_AX = (link_in == {bitwidth}'d1) ? 32'd0 : dadq_prev_vec_reg_AX;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dadq_prev_vec_mux_AY = (link_in == {bitwidth}'d1) ? 32'd0 : dadq_prev_vec_reg_AY;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dadq_prev_vec_mux_AZ = (link_in == {bitwidth}'d1) ? 32'd0 : dadq_prev_vec_reg_AZ;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dadq_prev_vec_mux_LX = (link_in == {bitwidth}'d1) ? 32'd0 : dadq_prev_vec_reg_LX;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dadq_prev_vec_mux_LY = (link_in == {bitwidth}'d1) ? 32'd0 : dadq_prev_vec_reg_LY;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dadq_prev_vec_mux_LZ = (link_in == {bitwidth}'d1) ? 32'd0 : dadq_prev_vec_reg_LZ;".format(bitwidth=bitwidth_num_links))
vw.writeLine("")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // in --> stage 1 --> [reg] --> stage 2 --> [reg] --> stage 3 --> out")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // mcross")
vw.writeLine("   assign vordv_prev_vec_mux_AX = (mcross) ? v_prev_vec_in_AX : dvdq_prev_vec_mux_AX;")
vw.writeLine("   assign vordv_prev_vec_mux_AY = (mcross) ? v_prev_vec_in_AY : dvdq_prev_vec_mux_AY;")
vw.writeLine("   assign vordv_prev_vec_mux_AZ = (mcross) ? v_prev_vec_in_AZ : dvdq_prev_vec_mux_AZ;")
vw.writeLine("   assign vordv_prev_vec_mux_LX = (mcross) ? v_prev_vec_in_LX : dvdq_prev_vec_mux_LX;")
vw.writeLine("   assign vordv_prev_vec_mux_LY = (mcross) ? v_prev_vec_in_LY : dvdq_prev_vec_mux_LY;")
vw.writeLine("   assign vordv_prev_vec_mux_LZ = (mcross) ? v_prev_vec_in_LZ : dvdq_prev_vec_mux_LZ;")
vw.writeLine("   assign aorda_prev_vec_mux_AX = (mcross) ? a_prev_vec_in_AX : dadq_prev_vec_mux_AX;")
vw.writeLine("   assign aorda_prev_vec_mux_AY = (mcross) ? a_prev_vec_in_AY : dadq_prev_vec_mux_AY;")
vw.writeLine("   assign aorda_prev_vec_mux_AZ = (mcross) ? a_prev_vec_in_AZ : dadq_prev_vec_mux_AZ;")
vw.writeLine("   assign aorda_prev_vec_mux_LX = (mcross) ? a_prev_vec_in_LX : dadq_prev_vec_mux_LX;")
vw.writeLine("   assign aorda_prev_vec_mux_LY = (mcross) ? a_prev_vec_in_LY : dadq_prev_vec_mux_LY;")
vw.writeLine("   assign aorda_prev_vec_mux_LZ = (mcross) ? a_prev_vec_in_LZ : dadq_prev_vec_mux_LZ;")
vw.writeLine("")
vw.writeLine("   dqfpijx_seq#(.WIDTH(WIDTH),.DECIMAL_BITS(DECIMAL_BITS))")
vw.writeLine("      dqfpijx_seq_unit(")
vw.writeLine("      // clock")
vw.writeLine("      .clk(clk),")
vw.writeLine("      // stage booleans")
vw.writeLine("      .s1_bool_in(s1_bool_in),.s2_bool_in(s2_bool_in),.s3_bool_in(s3_bool_in),")
vw.writeLine("      // link_in")
vw.writeLine("      .link_in(link_in),")
vw.writeLine("      // sin(q) and cos(q)")
vw.writeLine("      .sinq_val_in(sinq_val_in),.cosq_val_in(cosq_val_in),")
vw.writeLine("      // qd_val_in")
vw.writeLine("      .qd_val_in(qd_val_in),")
vw.writeLine("      // v_vec_in, 6 values")
vw.writeLine("      .v_vec_in_AX(v_curr_vec_in_AX),.v_vec_in_AY(v_curr_vec_in_AY),.v_vec_in_AZ(v_curr_vec_in_AZ),.v_vec_in_LX(v_curr_vec_in_LX),.v_vec_in_LY(v_curr_vec_in_LY),.v_vec_in_LZ(v_curr_vec_in_LZ),")
vw.writeLine("      // mcross boolean")
vw.writeLine("      .mcross(mcross),")
vw.writeLine("      // dv_vec_in, 6 values")
vw.writeLine("      .dv_vec_in_AX(vordv_prev_vec_mux_AX),.dv_vec_in_AY(vordv_prev_vec_mux_AY),.dv_vec_in_AZ(vordv_prev_vec_mux_AZ),.dv_vec_in_LX(vordv_prev_vec_mux_LX),.dv_vec_in_LY(vordv_prev_vec_mux_LY),.dv_vec_in_LZ(vordv_prev_vec_mux_LZ),")
vw.writeLine("      // da_vec_in, 6 values")
vw.writeLine("      .da_vec_in_AX(aorda_prev_vec_mux_AX),.da_vec_in_AY(aorda_prev_vec_mux_AY),.da_vec_in_AZ(aorda_prev_vec_mux_AZ),.da_vec_in_LX(aorda_prev_vec_mux_LX),.da_vec_in_LY(aorda_prev_vec_mux_LY),.da_vec_in_LZ(aorda_prev_vec_mux_LZ),")
vw.writeLine("      // dvdq_vec_out, 6 values")
vw.writeLine("      .dvdq_vec_out_AX(dvdq_curr_vec_out_AX),.dvdq_vec_out_AY(dvdq_curr_vec_out_AY),.dvdq_vec_out_AZ(dvdq_curr_vec_out_AZ),.dvdq_vec_out_LX(dvdq_curr_vec_out_LX),.dvdq_vec_out_LY(dvdq_curr_vec_out_LY),.dvdq_vec_out_LZ(dvdq_curr_vec_out_LZ),")
vw.writeLine("      // dadq_vec_out, 6 values")
vw.writeLine("      .dadq_vec_out_AX(dadq_curr_vec_out_AX),.dadq_vec_out_AY(dadq_curr_vec_out_AY),.dadq_vec_out_AZ(dadq_curr_vec_out_AZ),.dadq_vec_out_LX(dadq_curr_vec_out_LX),.dadq_vec_out_LY(dadq_curr_vec_out_LY),.dadq_vec_out_LZ(dadq_curr_vec_out_LZ),")
vw.writeLine("      // dfdq_vec_out, 6 values")
vw.writeLine("      .dfdq_vec_out_AX(dfdq_curr_vec_out_AX),.dfdq_vec_out_AY(dfdq_curr_vec_out_AY),.dfdq_vec_out_AZ(dfdq_curr_vec_out_AZ),.dfdq_vec_out_LX(dfdq_curr_vec_out_LX),.dfdq_vec_out_LY(dfdq_curr_vec_out_LY),.dfdq_vec_out_LZ(dfdq_curr_vec_out_LZ)")
vw.writeLine("      );")
vw.writeLine("")
vw.writeLine("endmodule")
