from URDFParser import URDFParser
from FPGACodegen import FPGACodegen
from util import VerilogWriter, FileManager
from rbd_config import dim_list, urdf_file

#---------------------------------------------

parser = URDFParser()
robot = parser.parse(urdf_file)
fpga_codegen = FPGACodegen(robot)

#-------- urdf attrs needed for codegen-ing this file ----------------

num_links = robot.get_num_links_effective()
xform_bools_full = fpga_codegen.get_Xmat_sparsity_boolean_matrix_OR()
xform_bools = fpga_codegen.left_half_matrix(xform_bools_full)

#-------- File management -------------------

fm = FileManager("dqdfpijx.v")
output_file_path = fm.get_output_file_path()
dqdfpijx_file = open(output_file_path, "w")

vw = VerilogWriter(dqdfpijx_file, dim_list, num_links)

#--------- Setting commonly used bitwidths -----

# Find Bitwidth of # Links
bitwidth_num_links = vw.get_bitwidth(num_links)

############

vw.writeLine("`timescale 1ns / 1ps")
vw.writeLine("")
vw.writeLine("// dqd Forward Pass for Link i Input j")
vw.writeLine("")
vw.writeLine("//------------------------------------------------------------------------------")
vw.writeLine("// dqdfpijx Module")
vw.writeLine("//------------------------------------------------------------------------------")
vw.writeLine("module dqdfpijx#(parameter WIDTH = 32,parameter DECIMAL_BITS = 16)(")
vw.writeLine("   // clock")
vw.writeLine("   input clk,")
vw.writeLine("   // reset")
vw.writeLine("   input reset,")
vw.writeLine("   // state_reg")
vw.writeLine("   input  [2:0]")
vw.writeLine("      state_reg,")
vw.writeLine("   // stage booleans")
vw.writeLine("   input")
vw.writeLine("      s1_bool_in,s2_bool_in,s3_bool_in,")
vw.writeLine("   // link_in")
vw.writeLine("   input  ["+str(vw.get_bitwidth_array_def(num_links))+":0]")
vw.writeLine("      link_in,")
vw.writeLine("   // sin(q) and cos(q)")
vw.writeLine("   input  signed[(WIDTH-1):0]")
vw.writeLine("      sinq_val_in,cosq_val_in,")
vw.writeLine("   // qd_val_in")
vw.writeLine("   input  signed[(WIDTH-1):0]")
vw.writeLine("      qd_val_in,")
vw.writeLine("   // v_curr_vec_in, 6 values")
vw.writeLine("   input  signed[(WIDTH-1):0]")
vw.writeLine("      v_curr_vec_in_AX,v_curr_vec_in_AY,v_curr_vec_in_AZ,v_curr_vec_in_LX,v_curr_vec_in_LY,v_curr_vec_in_LZ,")
vw.writeLine("   // a_curr_vec_in, 6 values")
vw.writeLine("   input  signed[(WIDTH-1):0]")
vw.writeLine("      a_curr_vec_in_AX,a_curr_vec_in_AY,a_curr_vec_in_AZ,a_curr_vec_in_LX,a_curr_vec_in_LY,a_curr_vec_in_LZ,")
vw.writeLine("   // mcross boolean")
vw.writeLine("   input  mcross,")
vw.writeLine("   // dfdqd_curr_vec_out, 6 values")
vw.writeLine("   output signed[(WIDTH-1):0]")
vw.writeLine("      dfdqd_curr_vec_out_AX,dfdqd_curr_vec_out_AY,dfdqd_curr_vec_out_AZ,dfdqd_curr_vec_out_LX,dfdqd_curr_vec_out_LY,dfdqd_curr_vec_out_LZ")
vw.writeLine("   );")
vw.writeLine("")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // internal wires and state")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // registers")
vw.writeLine("   reg signed[(WIDTH-1):0]")
vw.writeLine("      dadqd_prev_vec_reg_AX,dadqd_prev_vec_reg_AY,dadqd_prev_vec_reg_AZ,dadqd_prev_vec_reg_LX,dadqd_prev_vec_reg_LY,dadqd_prev_vec_reg_LZ,")
vw.writeLine("      dvdqd_prev_vec_reg_AX,dvdqd_prev_vec_reg_AY,dvdqd_prev_vec_reg_AZ,dvdqd_prev_vec_reg_LX,dvdqd_prev_vec_reg_LY,dvdqd_prev_vec_reg_LZ;")
vw.writeLine("   // next")
vw.writeLine("   wire signed[(WIDTH-1):0]")
vw.writeLine("      dadqd_prev_vec_next_AX,dadqd_prev_vec_next_AY,dadqd_prev_vec_next_AZ,dadqd_prev_vec_next_LX,dadqd_prev_vec_next_LY,dadqd_prev_vec_next_LZ,")
vw.writeLine("      dvdqd_prev_vec_next_AX,dvdqd_prev_vec_next_AY,dvdqd_prev_vec_next_AZ,dvdqd_prev_vec_next_LX,dvdqd_prev_vec_next_LY,dvdqd_prev_vec_next_LZ;")
vw.writeLine("   wire signed[(WIDTH-1):0]")
vw.writeLine("      dadqd_curr_vec_out_AX,dadqd_curr_vec_out_AY,dadqd_curr_vec_out_AZ,dadqd_curr_vec_out_LX,dadqd_curr_vec_out_LY,dadqd_curr_vec_out_LZ,")
vw.writeLine("      dvdqd_curr_vec_out_AX,dvdqd_curr_vec_out_AY,dvdqd_curr_vec_out_AZ,dvdqd_curr_vec_out_LX,dvdqd_curr_vec_out_LY,dvdqd_curr_vec_out_LZ;")
vw.writeLine("   // mux")
vw.writeLine("   wire signed[(WIDTH-1):0]")
vw.writeLine("      dadqd_prev_vec_mux_AX,dadqd_prev_vec_mux_AY,dadqd_prev_vec_mux_AZ,dadqd_prev_vec_mux_LX,dadqd_prev_vec_mux_LY,dadqd_prev_vec_mux_LZ,")
vw.writeLine("      dvdqd_prev_vec_mux_AX,dvdqd_prev_vec_mux_AY,dvdqd_prev_vec_mux_AZ,dvdqd_prev_vec_mux_LX,dvdqd_prev_vec_mux_LY,dvdqd_prev_vec_mux_LZ;")
vw.writeLine("")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // internal assignments")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // da/dqd prev")
vw.writeLine("   assign dadqd_prev_vec_next_AX = (state_reg == 3'd3) ? dadqd_curr_vec_out_AX : dadqd_prev_vec_reg_AX;")
vw.writeLine("   assign dadqd_prev_vec_next_AY = (state_reg == 3'd3) ? dadqd_curr_vec_out_AY : dadqd_prev_vec_reg_AY;")
vw.writeLine("   assign dadqd_prev_vec_next_AZ = (state_reg == 3'd3) ? dadqd_curr_vec_out_AZ : dadqd_prev_vec_reg_AZ;")
vw.writeLine("   assign dadqd_prev_vec_next_LX = (state_reg == 3'd3) ? dadqd_curr_vec_out_LX : dadqd_prev_vec_reg_LX;")
vw.writeLine("   assign dadqd_prev_vec_next_LY = (state_reg == 3'd3) ? dadqd_curr_vec_out_LY : dadqd_prev_vec_reg_LY;")
vw.writeLine("   assign dadqd_prev_vec_next_LZ = (state_reg == 3'd3) ? dadqd_curr_vec_out_LZ : dadqd_prev_vec_reg_LZ;")
vw.writeLine("   // dv/dqd prev")
vw.writeLine("   assign dvdqd_prev_vec_next_AX = (state_reg == 3'd3) ? dvdqd_curr_vec_out_AX : dvdqd_prev_vec_reg_AX;")
vw.writeLine("   assign dvdqd_prev_vec_next_AY = (state_reg == 3'd3) ? dvdqd_curr_vec_out_AY : dvdqd_prev_vec_reg_AY;")
vw.writeLine("   assign dvdqd_prev_vec_next_AZ = (state_reg == 3'd3) ? dvdqd_curr_vec_out_AZ : dvdqd_prev_vec_reg_AZ;")
vw.writeLine("   assign dvdqd_prev_vec_next_LX = (state_reg == 3'd3) ? dvdqd_curr_vec_out_LX : dvdqd_prev_vec_reg_LX;")
vw.writeLine("   assign dvdqd_prev_vec_next_LY = (state_reg == 3'd3) ? dvdqd_curr_vec_out_LY : dvdqd_prev_vec_reg_LY;")
vw.writeLine("   assign dvdqd_prev_vec_next_LZ = (state_reg == 3'd3) ? dvdqd_curr_vec_out_LZ : dvdqd_prev_vec_reg_LZ;")
vw.writeLine("")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // internal registers")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   always @ (posedge clk or posedge reset)")
vw.writeLine("   begin")
vw.writeLine("      if (reset)")
vw.writeLine("      begin")
vw.writeLine("         // da/dqd prev")
vw.writeLine("         dadqd_prev_vec_reg_AX <= 32'd0;")
vw.writeLine("         dadqd_prev_vec_reg_AY <= 32'd0;")
vw.writeLine("         dadqd_prev_vec_reg_AZ <= 32'd0;")
vw.writeLine("         dadqd_prev_vec_reg_LX <= 32'd0;")
vw.writeLine("         dadqd_prev_vec_reg_LY <= 32'd0;")
vw.writeLine("         dadqd_prev_vec_reg_LZ <= 32'd0;")
vw.writeLine("         // dv/dqd prev")
vw.writeLine("         dvdqd_prev_vec_reg_AX <= 32'd0;")
vw.writeLine("         dvdqd_prev_vec_reg_AY <= 32'd0;")
vw.writeLine("         dvdqd_prev_vec_reg_AZ <= 32'd0;")
vw.writeLine("         dvdqd_prev_vec_reg_LX <= 32'd0;")
vw.writeLine("         dvdqd_prev_vec_reg_LY <= 32'd0;")
vw.writeLine("         dvdqd_prev_vec_reg_LZ <= 32'd0;")
vw.writeLine("      end")
vw.writeLine("      else")
vw.writeLine("      begin")
vw.writeLine("         // da/dqd prev")
vw.writeLine("         dadqd_prev_vec_reg_AX <= dadqd_prev_vec_next_AX;")
vw.writeLine("         dadqd_prev_vec_reg_AY <= dadqd_prev_vec_next_AY;")
vw.writeLine("         dadqd_prev_vec_reg_AZ <= dadqd_prev_vec_next_AZ;")
vw.writeLine("         dadqd_prev_vec_reg_LX <= dadqd_prev_vec_next_LX;")
vw.writeLine("         dadqd_prev_vec_reg_LY <= dadqd_prev_vec_next_LY;")
vw.writeLine("         dadqd_prev_vec_reg_LZ <= dadqd_prev_vec_next_LZ;")
vw.writeLine("         // dv/dqd prev")
vw.writeLine("         dvdqd_prev_vec_reg_AX <= dvdqd_prev_vec_next_AX;")
vw.writeLine("         dvdqd_prev_vec_reg_AY <= dvdqd_prev_vec_next_AY;")
vw.writeLine("         dvdqd_prev_vec_reg_AZ <= dvdqd_prev_vec_next_AZ;")
vw.writeLine("         dvdqd_prev_vec_reg_LX <= dvdqd_prev_vec_next_LX;")
vw.writeLine("         dvdqd_prev_vec_reg_LY <= dvdqd_prev_vec_next_LY;")
vw.writeLine("         dvdqd_prev_vec_reg_LZ <= dvdqd_prev_vec_next_LZ;")
vw.writeLine("      end")
vw.writeLine("   end")
vw.writeLine("")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // input muxes")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // dvdqd prev")
vw.writeLine("   assign dvdqd_prev_vec_mux_AX = (link_in == {bitwidth}'d1) ? 32'd0 : dvdqd_prev_vec_reg_AX;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dvdqd_prev_vec_mux_AY = (link_in == {bitwidth}'d1) ? 32'd0 : dvdqd_prev_vec_reg_AY;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dvdqd_prev_vec_mux_AZ = (link_in == {bitwidth}'d1) ? 32'd0 : dvdqd_prev_vec_reg_AZ;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dvdqd_prev_vec_mux_LX = (link_in == {bitwidth}'d1) ? 32'd0 : dvdqd_prev_vec_reg_LX;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dvdqd_prev_vec_mux_LY = (link_in == {bitwidth}'d1) ? 32'd0 : dvdqd_prev_vec_reg_LY;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dvdqd_prev_vec_mux_LZ = (link_in == {bitwidth}'d1) ? 32'd0 : dvdqd_prev_vec_reg_LZ;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   // dadqd prev")
vw.writeLine("   assign dadqd_prev_vec_mux_AX = (link_in == {bitwidth}'d1) ? 32'd0 : dadqd_prev_vec_reg_AX;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dadqd_prev_vec_mux_AY = (link_in == {bitwidth}'d1) ? 32'd0 : dadqd_prev_vec_reg_AY;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dadqd_prev_vec_mux_AZ = (link_in == {bitwidth}'d1) ? 32'd0 : dadqd_prev_vec_reg_AZ;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dadqd_prev_vec_mux_LX = (link_in == {bitwidth}'d1) ? 32'd0 : dadqd_prev_vec_reg_LX;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dadqd_prev_vec_mux_LY = (link_in == {bitwidth}'d1) ? 32'd0 : dadqd_prev_vec_reg_LY;".format(bitwidth=bitwidth_num_links))
vw.writeLine("   assign dadqd_prev_vec_mux_LZ = (link_in == {bitwidth}'d1) ? 32'd0 : dadqd_prev_vec_reg_LZ;".format(bitwidth=bitwidth_num_links))
vw.writeLine("")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   // in --> stage 1 --> [reg] --> stage 2 --> [reg] --> stage 3 --> out")
vw.writeLine("   //---------------------------------------------------------------------------")
vw.writeLine("   dqdfpijx_seq#(.WIDTH(WIDTH),.DECIMAL_BITS(DECIMAL_BITS))")
vw.writeLine("      dqdfpijx_seq_unit(")
vw.writeLine("      // clock")
vw.writeLine("      .clk(clk),")
vw.writeLine("      // stage booleans")
vw.writeLine("      .s1_bool_in(s1_bool_in),.s2_bool_in(s2_bool_in),.s3_bool_in(s3_bool_in),")
vw.writeLine("      // link_in")
vw.writeLine("      .link_in(link_in),")
vw.writeLine("      // sin(q) and cos(q)")
vw.writeLine("      .sinq_val_in(sinq_val_in),.cosq_val_in(cosq_val_in),")
vw.writeLine("      // qd_val_in")
vw.writeLine("      .qd_val_in(qd_val_in),")
vw.writeLine("      // v_vec_in, 6 values")
vw.writeLine("      .v_vec_in_AX(v_curr_vec_in_AX),.v_vec_in_AY(v_curr_vec_in_AY),.v_vec_in_AZ(v_curr_vec_in_AZ),.v_vec_in_LX(v_curr_vec_in_LX),.v_vec_in_LY(v_curr_vec_in_LY),.v_vec_in_LZ(v_curr_vec_in_LZ),")
vw.writeLine("      // mcross boolean")
vw.writeLine("      .mcross(mcross),")
vw.writeLine("      // dv_vec_in, 6 values")
vw.writeLine("      .dv_vec_in_AX(dvdqd_prev_vec_mux_AX),.dv_vec_in_AY(dvdqd_prev_vec_mux_AY),.dv_vec_in_AZ(dvdqd_prev_vec_mux_AZ),.dv_vec_in_LX(dvdqd_prev_vec_mux_LX),.dv_vec_in_LY(dvdqd_prev_vec_mux_LY),.dv_vec_in_LZ(dvdqd_prev_vec_mux_LZ),")
vw.writeLine("      // da_vec_in, 6 values")
vw.writeLine("      .da_vec_in_AX(dadqd_prev_vec_mux_AX),.da_vec_in_AY(dadqd_prev_vec_mux_AY),.da_vec_in_AZ(dadqd_prev_vec_mux_AZ),.da_vec_in_LX(dadqd_prev_vec_mux_LX),.da_vec_in_LY(dadqd_prev_vec_mux_LY),.da_vec_in_LZ(dadqd_prev_vec_mux_LZ),")
vw.writeLine("      // dvdqd_vec_out, 6 values")
vw.writeLine("      .dvdqd_vec_out_AX(dvdqd_curr_vec_out_AX),.dvdqd_vec_out_AY(dvdqd_curr_vec_out_AY),.dvdqd_vec_out_AZ(dvdqd_curr_vec_out_AZ),.dvdqd_vec_out_LX(dvdqd_curr_vec_out_LX),.dvdqd_vec_out_LY(dvdqd_curr_vec_out_LY),.dvdqd_vec_out_LZ(dvdqd_curr_vec_out_LZ),")
vw.writeLine("      // dadqd_vec_out, 6 values")
vw.writeLine("      .dadqd_vec_out_AX(dadqd_curr_vec_out_AX),.dadqd_vec_out_AY(dadqd_curr_vec_out_AY),.dadqd_vec_out_AZ(dadqd_curr_vec_out_AZ),.dadqd_vec_out_LX(dadqd_curr_vec_out_LX),.dadqd_vec_out_LY(dadqd_curr_vec_out_LY),.dadqd_vec_out_LZ(dadqd_curr_vec_out_LZ),")
vw.writeLine("      // dfdqd_vec_out, 6 values")
vw.writeLine("      .dfdqd_vec_out_AX(dfdqd_curr_vec_out_AX),.dfdqd_vec_out_AY(dfdqd_curr_vec_out_AY),.dfdqd_vec_out_AZ(dfdqd_curr_vec_out_AZ),.dfdqd_vec_out_LX(dfdqd_curr_vec_out_LX),.dfdqd_vec_out_LY(dfdqd_curr_vec_out_LY),.dfdqd_vec_out_LZ(dfdqd_curr_vec_out_LZ)")
vw.writeLine("      );")
vw.writeLine("")
vw.writeLine("endmodule")
