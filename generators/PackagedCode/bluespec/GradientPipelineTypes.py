from URDFParser import URDFParser
from util import BluespecWriter, FileManager
from rbd_config import dim_list, urdf_file

#---------------------------------------------

parser = URDFParser()
robot = parser.parse(urdf_file)

#-------- urdf attrs needed for codegen-ing this file ----------------

num_links = robot.get_num_links_effective()

#-------- File management -------------------

fm = FileManager("GradientPipelineTypes.bsv")
output_file_path = fm.get_output_file_path()
gpt_file = open(output_file_path, "w")

bw = BluespecWriter(gpt_file, dim_list, num_links)

#---------------------------------------------

bw.writeLine("import Vector::*;")
bw.writeLine("typedef 8 Depth;")
bw.writeLine("typedef 21 InputSize;")
bw.writeLine("typedef 12 IntermediateSize;")
bw.writeLine("typedef 6 FSize;")
bw.writeLine("typedef 16 OutputSize;")
bw.writeLine("typedef {num_links} NUM_LINKS;".format(num_links=num_links))
bw.writeLine("")
bw.writeLine("typedef struct {")
bw.writeLine("        Vector#(6,Bit#(32)) f;")
bw.writeLine("        Vector#(6,Bit#(32)) a;")
bw.writeLine("        Vector#(6,Bit#(32)) v;")
bw.writeLine("        Bit#(32) qd;")
bw.writeLine("        Bit#(32) cosq;")
bw.writeLine("        Bit#(32) sinq;")
bw.writeLine("} FPGALink1 deriving(Eq, Bits, FShow);")
bw.writeLine("")
bw.writeLine("typedef struct {")
bw.writeLine("        Bit#(32) qdd;")
bw.writeLine("        Bit#(32) qd;")
bw.writeLine("        Bit#(32) cosq;")
bw.writeLine("        Bit#(32) sinq;")
bw.writeLine("} FPGALink2 deriving(Eq, Bits, FShow);")
bw.writeLine("")
bw.writeLine("typedef struct {")
bw.writeLine("	Vector#(NUM_LINKS,Bit#(32)) minv;")
bw.writeLine("        Bit#(32) qdd;")
bw.writeLine("        Bit#(32) qd;")
bw.writeLine("        Bit#(32) cosq;")
bw.writeLine("        Bit#(32) sinq;")
bw.writeLine("} FPGALink3 deriving(Eq, Bits, FShow);")
bw.writeLine("")
bw.writeLine("")
bw.writeLine("")
bw.writeLine("typedef struct {")
bw.writeLine("        Vector#(6,Vector#(NUM_LINKS,Bit#(32))) dfidq;")
bw.writeLine("        Vector#(6,Vector#(NUM_LINKS,Bit#(32))) dfidqd;")
bw.writeLine("} Intermediate deriving(Eq, Bits, FShow);")
bw.writeLine("")
bw.writeLine("typedef struct {")
bw.writeLine("        Bit#(32) cosq;")
bw.writeLine("        Bit#(32) sinq;")
bw.writeLine("	Vector#(NUM_LINKS,Bit#(32)) minv;")
bw.writeLine("} Trigo deriving(Eq,Bits,FShow);")
bw.writeLine("")
bw.writeLine("typedef struct {")
bw.writeLine("        Vector#(6,Bit#(32)) f;")
bw.writeLine("        Vector#(6,Vector#(NUM_LINKS,Bit#(32))) dfidq;")
bw.writeLine("        Vector#(6,Vector#(NUM_LINKS,Bit#(32))) dfidqd;")
bw.writeLine("} Intermediate2 deriving(Eq, Bits, FShow);")
bw.writeLine("")
bw.writeLine("typedef struct {")
bw.writeLine("        Vector#(6,Bit#(32)) f;")
bw.writeLine("        Vector#(6,Bit#(32)) a;")
bw.writeLine("        Vector#(6,Bit#(32)) v;")
bw.writeLine("} RNEAIntermediate deriving(Eq, Bits, FShow);")
bw.writeLine("")
bw.writeLine("typedef struct {")
bw.writeLine("        Vector#(6,Bit#(32)) dvdq;")
bw.writeLine("        Vector#(6,Bit#(32)) dadq;")
bw.writeLine("        Vector#(6,Bit#(32)) dvdqd;")
bw.writeLine("        Vector#(6,Bit#(32)) dadqd;")
bw.writeLine("} DvDaIntermediate deriving(Eq, Bits, FShow);")
bw.writeLine("")
bw.writeLine("typedef struct {")
bw.writeLine("        Vector#(6,Bit#(32)) dfdq_upd;")
bw.writeLine("        Vector#(6,Bit#(32)) dfdqd_upd;")
bw.writeLine("} DfUpdIntermediate deriving(Eq, Bits, FShow);")
bw.writeLine("")
bw.writeLine("typedef struct {")
bw.writeLine("        Vector#(6,Bit#(32)) f_upd;")
bw.writeLine("} FUpdIntermediate deriving(Eq, Bits, FShow);")
