from URDFParser import URDFParser
from FPGACodegen import FPGACodegen
from util import VerilogWriter, FileManager
from rbd_config import dim_list, urdf_file, num_PEs

#---------------------------------------------

parser = URDFParser()
robot = parser.parse(urdf_file)
fpga_codegen = FPGACodegen(robot)

#-------- urdf attrs needed for codegen-ing this file ----------------

num_links = robot.get_num_links_effective()

#-------- File management -------------------

fm = FileManager("fproc.v")
output_file_path = fm.get_output_file_path()
fproc_file = open(output_file_path, "w")

vw = VerilogWriter(fproc_file, dim_list, num_links)

#--------- Setting commonly used bitwidths -----

bitwidth_num_links = vw.get_bitwidth(num_links)
bitwidth_num_links_str = str(bitwidth_num_links)

#---------------------------------------------

#fproc = fpga_codegen.get_fproc(vw, num_PEs)
#print(fproc.gen_dfidq_prev_mat_out_ports_by_PE())

#---------------------------------------------

# Make 6D Vector String
def makeD6VecString(prefix,dim_list):
   vec_str = ""
   for d6 in dim_list:
      vec_str = vec_str+prefix+d6+","
   return vec_str

# Make 6xN Matrix String
def make6XNMatString(prefix,dim_list,num_links,indent):
   first_row_bool = True
   last_element_bool = False
   mat_str = ""
   for dim,d6 in enumerate(dim_list):
      row_str = ""
      for link in range(1,num_links+1):
         last_element_bool = (dim == len(dim_list)-1)&(link==num_links)
         if (last_element_bool):
            row_str = row_str+prefix+d6+"_J"+str(link)
         else:
            row_str = row_str+prefix+d6+"_J"+str(link)+","
      if (first_row_bool):
         mat_str = mat_str+indent+row_str
      else:
         mat_str = mat_str+"\n"+indent+row_str
      first_row_bool = False
   return mat_str

# Write MCross Booleans Code Block
def writeMCrossBooleans(output_file,num_links,indent):
   wire_str = indent+"wire "
   for link in range(1,num_links+1):
      wire_str = wire_str+"mx"+str(link)
      if (link==num_links):
         wire_str = wire_str+";\n"
      else:
         wire_str = wire_str+","
   output_file.write(wire_str)
   for link in range(1,num_links+1):
      link_str = str(link)
      output_file.write(indent+"assign mx"+link_str+" = (grad_link == "+bitwidth_num_links_str+"'d"+link_str+") ? 1 : 0;\n")

# Write dID/dq Joint
def writeDQJoint(joint,output_file,dim_list,indent):
   j_str = str(joint)
   output_file.write(indent+"// Joint "+j_str+"\n")
   if (joint == 1):
      for dim,d_str in enumerate(dim_list):
         output_file.write(indent+"assign dfidq_prev_mat_out_"+d_str+"_J"+j_str+" = 0;\n")
   else:
      output_file.write(indent+"dqfpijx#(.WIDTH(WIDTH),.DECIMAL_BITS(DECIMAL_BITS))"+"\n")
      output_file.write(indent+indent+"dqfpi"+j_str+"("+"\n")
      output_file.write(indent+indent+"// clock"+"\n")
      output_file.write(indent+indent+".clk(clk),"+"\n")
      output_file.write(indent+indent+"// reset"+"\n")
      output_file.write(indent+indent+".reset(reset),"+"\n")
      output_file.write(indent+indent+"// state_reg"+"\n")
      output_file.write(indent+indent+".state_reg(state_reg),"+"\n")
      output_file.write(indent+indent+"// stage booleans"+"\n")
      output_file.write(indent+indent+".s1_bool_in(s1_bool_reg),.s2_bool_in(s2_bool_reg),.s3_bool_in(s3_bool_reg),"+"\n")
      output_file.write(indent+indent+"// link_in"+"\n")
      output_file.write(indent+indent+".link_in(grad_link),"+"\n")
      output_file.write(indent+indent+"// sin(q) and cos(q)"+"\n")
      output_file.write(indent+indent+".sinq_val_in(sinq_prev_mux),.cosq_val_in(cosq_prev_mux),"+"\n")
      output_file.write(indent+indent+"// qd_val_in"+"\n")
      output_file.write(indent+indent+".qd_val_in(qd_prev_mux),"+"\n")
      output_file.write(indent+indent+"// v_vec_in, 6 values"+"\n")
      output_file.write(indent+indent+".v_curr_vec_in_AX(v_prev_vec_mux_AX),.v_curr_vec_in_AY(v_prev_vec_mux_AY),.v_curr_vec_in_AZ(v_prev_vec_mux_AZ),.v_curr_vec_in_LX(v_prev_vec_mux_LX),.v_curr_vec_in_LY(v_prev_vec_mux_LY),.v_curr_vec_in_LZ(v_prev_vec_mux_LZ),"+"\n")
      output_file.write(indent+indent+"// a_vec_in, 6 values"+"\n")
      output_file.write(indent+indent+".a_curr_vec_in_AX(a_prev_vec_mux_AX),.a_curr_vec_in_AY(a_prev_vec_mux_AY),.a_curr_vec_in_AZ(a_prev_vec_mux_AZ),.a_curr_vec_in_LX(a_prev_vec_mux_LX),.a_curr_vec_in_LY(a_prev_vec_mux_LY),.a_curr_vec_in_LZ(a_prev_vec_mux_LZ),"+"\n")
      output_file.write(indent+indent+"// v_vec_in, 6 values"+"\n")
      output_file.write(indent+indent+".v_prev_vec_in_AX(v_2prev_vec_mux_AX),.v_prev_vec_in_AY(v_2prev_vec_mux_AY),.v_prev_vec_in_AZ(v_2prev_vec_mux_AZ),.v_prev_vec_in_LX(v_2prev_vec_mux_LX),.v_prev_vec_in_LY(v_2prev_vec_mux_LY),.v_prev_vec_in_LZ(v_2prev_vec_mux_LZ),"+"\n")
      output_file.write(indent+indent+"// a_vec_in, 6 values"+"\n")
      output_file.write(indent+indent+".a_prev_vec_in_AX(a_2prev_vec_mux_AX),.a_prev_vec_in_AY(a_2prev_vec_mux_AY),.a_prev_vec_in_AZ(a_2prev_vec_mux_AZ),.a_prev_vec_in_LX(a_2prev_vec_mux_LX),.a_prev_vec_in_LY(a_2prev_vec_mux_LY),.a_prev_vec_in_LZ(a_2prev_vec_mux_LZ),"+"\n")
      output_file.write(indent+indent+"// mcross boolean"+"\n")
      output_file.write(indent+indent+".mcross(mx"+j_str+"),"+"\n")
      output_file.write(indent+indent+"// dfdq_vec_out, 6 values"+"\n")
      output_file.write(indent+indent)
      for dim,d_str in enumerate(dim_list):
         last_element_bool = (dim == len(dim_list)-1)
         output_file.write(".dfdq_curr_vec_out_"+d_str+"(dfidq_prev_mat_out_"+d_str+"_J"+j_str+")")
         if (last_element_bool):
            output_file.write("\n")
         else:
            output_file.write(",")
      output_file.write(indent+indent+");"+"\n")

# Write dID/dqd Joint
def writeDQDJoint(joint,output_file,dim_list,indent):
   j_str = str(joint)
   output_file.write(indent+"// Joint "+j_str+"\n")
   output_file.write(indent+"dqdfpijx#(.WIDTH(WIDTH),.DECIMAL_BITS(DECIMAL_BITS))"+"\n")
   output_file.write(indent+indent+"dqdfpi"+j_str+"("+"\n")
   output_file.write(indent+indent+"// clock"+"\n")
   output_file.write(indent+indent+".clk(clk),"+"\n")
   output_file.write(indent+indent+"// reset"+"\n")
   output_file.write(indent+indent+".reset(reset),"+"\n")
   output_file.write(indent+indent+"// state_reg"+"\n")
   output_file.write(indent+indent+".state_reg(state_reg),"+"\n")
   output_file.write(indent+indent+"// stage booleans"+"\n")
   output_file.write(indent+indent+".s1_bool_in(s1_bool_reg),.s2_bool_in(s2_bool_reg),.s3_bool_in(s3_bool_reg),"+"\n")
   output_file.write(indent+indent+"// link_in"+"\n")
   output_file.write(indent+indent+".link_in(grad_link),"+"\n")
   output_file.write(indent+indent+"// sin(q) and cos(q)"+"\n")
   output_file.write(indent+indent+".sinq_val_in(sinq_prev_mux),.cosq_val_in(cosq_prev_mux),"+"\n")
   output_file.write(indent+indent+"// qd_val_in"+"\n")
   output_file.write(indent+indent+".qd_val_in(qd_prev_mux),"+"\n")
   output_file.write(indent+indent+"// v_vec_in, 6 values"+"\n")
   output_file.write(indent+indent+".v_curr_vec_in_AX(v_prev_vec_mux_AX),.v_curr_vec_in_AY(v_prev_vec_mux_AY),.v_curr_vec_in_AZ(v_prev_vec_mux_AZ),.v_curr_vec_in_LX(v_prev_vec_mux_LX),.v_curr_vec_in_LY(v_prev_vec_mux_LY),.v_curr_vec_in_LZ(v_prev_vec_mux_LZ),"+"\n")
   output_file.write(indent+indent+"// a_vec_in, 6 values"+"\n")
   output_file.write(indent+indent+".a_curr_vec_in_AX(a_prev_vec_mux_AX),.a_curr_vec_in_AY(a_prev_vec_mux_AY),.a_curr_vec_in_AZ(a_prev_vec_mux_AZ),.a_curr_vec_in_LX(a_prev_vec_mux_LX),.a_curr_vec_in_LY(a_prev_vec_mux_LY),.a_curr_vec_in_LZ(a_prev_vec_mux_LZ),"+"\n")
   output_file.write(indent+indent+"// mcross boolean"+"\n")
   output_file.write(indent+indent+".mcross(mx"+j_str+"),"+"\n")
   output_file.write(indent+indent+"// dfdqd_vec_out, 6 values"+"\n")
   output_file.write(indent+indent)
   for dim,d_str in enumerate(dim_list):
      last_element_bool = (dim == len(dim_list)-1)
      output_file.write(".dfdqd_curr_vec_out_"+d_str+"(dfidqd_prev_mat_out_"+d_str+"_J"+j_str+")")
      if (last_element_bool):
         output_file.write("\n")
      else:
         output_file.write(",")
   output_file.write(indent+indent+");"+"\n")

#-------------------------------------------------------------------------------
fproc_file.write("`timescale 1ns / 1ps"+"\n")
fproc_file.write("\n")
fproc_file.write("// Forward Pass Row Unit with RNEA"+"\n")
fproc_file.write("\n")
fproc_file.write("//------------------------------------------------------------------------------"+"\n")
fproc_file.write("// fproc Module"+"\n")
fproc_file.write("//------------------------------------------------------------------------------"+"\n")
fproc_file.write("module fproc#(parameter WIDTH = 32,parameter DECIMAL_BITS = 16)("+"\n")
fproc_file.write("   // clock"+"\n")
fproc_file.write("   input  clk,"+"\n")
fproc_file.write("   // reset"+"\n")
fproc_file.write("   input reset,"+"\n")
fproc_file.write("   // get_data"+"\n")
fproc_file.write("   input get_data,"+"\n")
fproc_file.write("   // sin(q) and cos(q)"+"\n")
fproc_file.write("   input  signed[(WIDTH-1):0]"+"\n")
fproc_file.write("      sinq_curr_in,cosq_curr_in,"+"\n")
fproc_file.write("   // qd_curr_in"+"\n")
fproc_file.write("   input  signed[(WIDTH-1):0]"+"\n")
fproc_file.write("      qd_curr_in,"+"\n")
fproc_file.write("   // qdd_curr_in"+"\n")
fproc_file.write("   input  signed[(WIDTH-1):0]"+"\n")
fproc_file.write("      qdd_curr_in,"+"\n")
fproc_file.write("   // output_ready"+"\n")
fproc_file.write("   output output_ready,"+"\n")
fproc_file.write("   // dummy_output"+"\n")
fproc_file.write("   output dummy_output,"+"\n")
fproc_file.write("   // f_prev_vec_out"+"\n")
fproc_file.write("   output signed[(WIDTH-1):0]"+"\n")
#-------------------------------------------------------------------------------
# TODO: example of using the file writing functions from the fproc port creation lib
#fproc.write_f_prev_vec_out_ports()
fproc_file.write("      ")
prefix = "f_prev_vec_out_"
vec_str = makeD6VecString(prefix,dim_list)
fproc_file.write(vec_str+"\n")
#-------------------------------------------------------------------------------
fproc_file.write("   // dfidq_prev_mat_out"+"\n")
fproc_file.write("   output signed[(WIDTH-1):0]"+"\n")
prefix = "dfidq_prev_mat_out_"
indent = "      "
mat_str = make6XNMatString(prefix,dim_list,num_links,indent)
fproc_file.write(mat_str+","+"\n")
#-------------------------------------------------------------------------------
fproc_file.write("   // dfidqd_prev_mat_out"+"\n")
fproc_file.write("   output signed[(WIDTH-1):0]"+"\n")
prefix = "dfidqd_prev_mat_out_"
indent = "      "
mat_str = make6XNMatString(prefix,dim_list,num_links,indent)
fproc_file.write(mat_str+"\n")
fproc_file.write("   );"+"\n")
fproc_file.write("\n")
#-------------------------------------------------------------------------------
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
fproc_file.write("   // external wires and state"+"\n")
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
fproc_file.write("   // registers"+"\n")
fproc_file.write("   reg get_data_reg;"+"\n")
fproc_file.write("   reg output_ready_reg;"+"\n")
fproc_file.write("   reg dummy_output_reg;"+"\n")
fproc_file.write("   reg ["+str(vw.get_bitwidth_array_def(num_links+1))+":0]"+"\n")
fproc_file.write("      link_in_reg;"+"\n")
fproc_file.write("   reg [2:0]"+"\n")
fproc_file.write("      state_reg;"+"\n")
fproc_file.write("   reg s1_bool_reg,s2_bool_reg,s3_bool_reg;"+"\n")
fproc_file.write("   reg signed[(WIDTH-1):0]"+"\n")
fproc_file.write("      sinq_curr_reg,cosq_curr_reg,"+"\n")
fproc_file.write("      sinq_prev_reg,cosq_prev_reg,"+"\n")
fproc_file.write("      qd_curr_reg,"+"\n")
fproc_file.write("      qd_prev_reg,"+"\n")
fproc_file.write("      qdd_curr_reg,"+"\n")
fproc_file.write("      v_prev_vec_reg_AX,v_prev_vec_reg_AY,v_prev_vec_reg_AZ,v_prev_vec_reg_LX,v_prev_vec_reg_LY,v_prev_vec_reg_LZ,"+"\n")
fproc_file.write("      a_prev_vec_reg_AX,a_prev_vec_reg_AY,a_prev_vec_reg_AZ,a_prev_vec_reg_LX,a_prev_vec_reg_LY,a_prev_vec_reg_LZ,"+"\n")
fproc_file.write("      f_prev_vec_reg_AX,f_prev_vec_reg_AY,f_prev_vec_reg_AZ,f_prev_vec_reg_LX,f_prev_vec_reg_LY,f_prev_vec_reg_LZ,"+"\n")
fproc_file.write("      v_2prev_vec_reg_AX,v_2prev_vec_reg_AY,v_2prev_vec_reg_AZ,v_2prev_vec_reg_LX,v_2prev_vec_reg_LY,v_2prev_vec_reg_LZ,"+"\n")
fproc_file.write("      a_2prev_vec_reg_AX,a_2prev_vec_reg_AY,a_2prev_vec_reg_AZ,a_2prev_vec_reg_LX,a_2prev_vec_reg_LY,a_2prev_vec_reg_LZ;"+"\n")
fproc_file.write("   // next"+"\n")
fproc_file.write("   wire get_data_next;"+"\n")
fproc_file.write("   wire output_ready_next;"+"\n")
fproc_file.write("   wire dummy_output_next;"+"\n")
fproc_file.write("   wire ["+str(vw.get_bitwidth_array_def(num_links+1))+":0]"+"\n")
fproc_file.write("      link_in_next,link_in_plus1,link_in_sub1;"+"\n")
fproc_file.write("   wire ["+str(vw.get_bitwidth_array_def(num_links))+":0]"+"\n")
fproc_file.write("      grad_link;"+"\n")
fproc_file.write("   wire [2:0]"+"\n")
fproc_file.write("      state_next;"+"\n")
fproc_file.write("   wire s1_bool_next,s2_bool_next,s3_bool_next;"+"\n")
fproc_file.write("   wire signed[(WIDTH-1):0]"+"\n")
fproc_file.write("      sinq_curr_next,cosq_curr_next,"+"\n")
fproc_file.write("      sinq_prev_next,cosq_prev_next,"+"\n")
fproc_file.write("      qd_curr_next,"+"\n")
fproc_file.write("      qd_prev_next,"+"\n")
fproc_file.write("      qdd_curr_next,"+"\n")
fproc_file.write("      v_prev_vec_next_AX,v_prev_vec_next_AY,v_prev_vec_next_AZ,v_prev_vec_next_LX,v_prev_vec_next_LY,v_prev_vec_next_LZ,"+"\n")
fproc_file.write("      a_prev_vec_next_AX,a_prev_vec_next_AY,a_prev_vec_next_AZ,a_prev_vec_next_LX,a_prev_vec_next_LY,a_prev_vec_next_LZ,"+"\n")
fproc_file.write("      f_prev_vec_next_AX,f_prev_vec_next_AY,f_prev_vec_next_AZ,f_prev_vec_next_LX,f_prev_vec_next_LY,f_prev_vec_next_LZ,"+"\n")
fproc_file.write("      v_2prev_vec_next_AX,v_2prev_vec_next_AY,v_2prev_vec_next_AZ,v_2prev_vec_next_LX,v_2prev_vec_next_LY,v_2prev_vec_next_LZ,"+"\n")
fproc_file.write("      a_2prev_vec_next_AX,a_2prev_vec_next_AY,a_2prev_vec_next_AZ,a_2prev_vec_next_LX,a_2prev_vec_next_LY,a_2prev_vec_next_LZ;"+"\n")
fproc_file.write("   // ID"+"\n")
fproc_file.write("   wire signed[(WIDTH-1):0]"+"\n")
fproc_file.write("      v_curr_vec_vaf_AX,v_curr_vec_vaf_AY,v_curr_vec_vaf_AZ,v_curr_vec_vaf_LX,v_curr_vec_vaf_LY,v_curr_vec_vaf_LZ,"+"\n")
fproc_file.write("      a_curr_vec_vaf_AX,a_curr_vec_vaf_AY,a_curr_vec_vaf_AZ,a_curr_vec_vaf_LX,a_curr_vec_vaf_LY,a_curr_vec_vaf_LZ,"+"\n")
fproc_file.write("      f_curr_vec_vaf_AX,f_curr_vec_vaf_AY,f_curr_vec_vaf_AZ,f_curr_vec_vaf_LX,f_curr_vec_vaf_LY,f_curr_vec_vaf_LZ;"+"\n")
fproc_file.write("   wire signed[(WIDTH-1):0]"+"\n")
fproc_file.write("      v_prev_vec_out_AX,v_prev_vec_out_AY,v_prev_vec_out_AZ,v_prev_vec_out_LX,v_prev_vec_out_LY,v_prev_vec_out_LZ,"+"\n")
fproc_file.write("      a_prev_vec_out_AX,a_prev_vec_out_AY,a_prev_vec_out_AZ,a_prev_vec_out_LX,a_prev_vec_out_LY,a_prev_vec_out_LZ;"+"\n")
fproc_file.write("   // mux"+"\n")
fproc_file.write("   wire signed[(WIDTH-1):0]"+"\n")
fproc_file.write("      sinq_prev_mux,cosq_prev_mux,"+"\n")
fproc_file.write("      qd_prev_mux,"+"\n")
fproc_file.write("      v_prev_vec_mux_AX,v_prev_vec_mux_AY,v_prev_vec_mux_AZ,v_prev_vec_mux_LX,v_prev_vec_mux_LY,v_prev_vec_mux_LZ,"+"\n")
fproc_file.write("      a_prev_vec_mux_AX,a_prev_vec_mux_AY,a_prev_vec_mux_AZ,a_prev_vec_mux_LX,a_prev_vec_mux_LY,a_prev_vec_mux_LZ,"+"\n")
fproc_file.write("      v_2prev_vec_mux_AX,v_2prev_vec_mux_AY,v_2prev_vec_mux_AZ,v_2prev_vec_mux_LX,v_2prev_vec_mux_LY,v_2prev_vec_mux_LZ,"+"\n")
fproc_file.write("      a_2prev_vec_mux_AX,a_2prev_vec_mux_AY,a_2prev_vec_mux_AZ,a_2prev_vec_mux_LX,a_2prev_vec_mux_LY,a_2prev_vec_mux_LZ;"+"\n")
fproc_file.write("\n")
#-------------------------------------------------------------------------------
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
fproc_file.write("   // external assignments"+"\n")
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
fproc_file.write("   // inputs"+"\n")
fproc_file.write("   assign get_data_next = get_data;"+"\n")
fproc_file.write("   // output"+"\n")
fproc_file.write("   assign output_ready = output_ready_reg;"+"\n")
fproc_file.write("   assign output_ready_next = ((state_reg == 3'd0)&&(get_data == 1)) ? 0 :"+"\n")
fproc_file.write("                              ((state_reg == 3'd0)&&(get_data == 0)) ? 0 :"+"\n")
fproc_file.write("                               (state_reg == 3'd1)                   ? 0 :"+"\n")
fproc_file.write("                               (state_reg == 3'd2)                   ? 1 :"+"\n")
fproc_file.write("                              ((state_reg == 3'd3)&&(get_data == 1)) ? 0 :"+"\n")
fproc_file.write("                              ((state_reg == 3'd3)&&(get_data == 0)) ? 0 : output_ready_reg;"+"\n")
fproc_file.write("   assign dummy_output = dummy_output_reg;"+"\n")
fproc_file.write("   assign dummy_output_next =  (state_reg == 3'd0)                   ? 0 :"+"\n")
fproc_file.write("                               (state_reg == 3'd1)                   ? 0 :"+"\n")
fproc_file.write("                              ((state_reg == 3'd2)&&(link_in_reg == {bitwidth}'d1)) ? 1 :".format(bitwidth=vw.get_bitwidth(num_links+1))+"\n")
fproc_file.write("                              ((state_reg == 3'd2)&&(link_in_reg != {bitwidth}'d1)) ? 0 :".format(bitwidth=vw.get_bitwidth(num_links+1))+"\n")
fproc_file.write("                               (state_reg == 3'd3)                   ? 0 : dummy_output_reg;"+"\n")
fproc_file.write("   // link"+"\n")
fproc_file.write("   assign link_in_plus1  = link_in_reg + 1;"+"\n")
fproc_file.write("   assign link_in_sub1   = link_in_reg - 1;"+"\n")
fproc_file.write("   assign link_in_next   = ((state_reg == 3'd0)&&(get_data == 1))                        ? link_in_plus1 :"+"\n")
fproc_file.write("                           ((state_reg == 3'd0)&&(get_data == 0))                        ? link_in_reg   :"+"\n")
fproc_file.write("                            (state_reg == 3'd1)                                          ? link_in_reg   :"+"\n")
fproc_file.write("                            (state_reg == 3'd2)                                          ? link_in_reg   :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 1)&&(link_in_reg == {bitwidth}'d{num_links_incr})) ? {bitwidth}'d1          :".format(bitwidth=vw.get_bitwidth(num_links+1), num_links_incr=num_links+1)+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 1)&&(link_in_reg != {bitwidth}'d{num_links_incr})) ? link_in_plus1 :".format(bitwidth=vw.get_bitwidth(num_links+1), num_links_incr=num_links+1)+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 0)&&(link_in_reg == {bitwidth}'d{num_links_incr})) ? {bitwidth}'d0          :".format(bitwidth=vw.get_bitwidth(num_links+1), num_links_incr=num_links+1)+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 0)&&(link_in_reg != {bitwidth}'d{num_links_incr})) ? link_in_reg   : link_in_reg;".format(bitwidth=vw.get_bitwidth(num_links+1), num_links_incr=num_links+1)+"\n")
fproc_file.write("   // state"+"\n")
fproc_file.write("   assign state_next     = ((state_reg == 3'd0)&&(get_data == 1)) ? 3'd1 :"+"\n")
fproc_file.write("                           ((state_reg == 3'd0)&&(get_data == 0)) ? 3'd0 :"+"\n")
fproc_file.write("                            (state_reg == 3'd1)                   ? 3'd2 :"+"\n")
fproc_file.write("                            (state_reg == 3'd2)                   ? 3'd3 :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 1)) ? 3'd1 :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 0)) ? 3'd0 : state_reg;"+"\n")
fproc_file.write("   assign s1_bool_next   = ((state_reg == 3'd0)&&(get_data == 1)) ? 1 :"+"\n")
fproc_file.write("                           ((state_reg == 3'd0)&&(get_data == 0)) ? s1_bool_reg :"+"\n")
fproc_file.write("                            (state_reg == 3'd1)                   ? 0 :"+"\n")
fproc_file.write("                            (state_reg == 3'd2)                   ? 0 :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 1)) ? 1 :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 0)) ? 0 : s1_bool_reg;"+"\n")
fproc_file.write("   assign s2_bool_next   = ((state_reg == 3'd0)&&(get_data == 1)) ? 0 :"+"\n")
fproc_file.write("                           ((state_reg == 3'd0)&&(get_data == 0)) ? 0 :"+"\n")
fproc_file.write("                            (state_reg == 3'd1)                   ? 1 :"+"\n")
fproc_file.write("                            (state_reg == 3'd2)                   ? 0 :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 1)) ? 0 :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 0)) ? 0 : s2_bool_reg;"+"\n")
fproc_file.write("   assign s3_bool_next   = ((state_reg == 3'd0)&&(get_data == 1)) ? 0 :"+"\n")
fproc_file.write("                           ((state_reg == 3'd0)&&(get_data == 0)) ? 0 :"+"\n")
fproc_file.write("                            (state_reg == 3'd1)                   ? 0 :"+"\n")
fproc_file.write("                            (state_reg == 3'd2)                   ? 1 :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 1)) ? 0 :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 0)) ? 0 : s3_bool_reg;"+"\n")
fproc_file.write("   // sinq, cosq, and qd curr"+"\n")
fproc_file.write("   assign sinq_curr_next = ((state_reg == 3'd0)&&(get_data == 1)) ? sinq_curr_in :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 1)) ? sinq_curr_in : sinq_curr_reg;"+"\n")
fproc_file.write("   assign cosq_curr_next = ((state_reg == 3'd0)&&(get_data == 1)) ? cosq_curr_in :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 1)) ? cosq_curr_in : cosq_curr_reg;"+"\n")
fproc_file.write("   assign qd_curr_next   = ((state_reg == 3'd0)&&(get_data == 1)) ? qd_curr_in   :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 1)) ? qd_curr_in   : qd_curr_reg;"+"\n")
fproc_file.write("   assign qdd_curr_next  = ((state_reg == 3'd0)&&(get_data == 1)) ? qdd_curr_in  :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 1)) ? qdd_curr_in  : qdd_curr_reg;"+"\n")
fproc_file.write("   // sinq, cosq, and qd prev"+"\n")
fproc_file.write("   assign sinq_prev_next = ((state_reg == 3'd0)&&(get_data == 1)) ? sinq_curr_reg :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 1)) ? sinq_curr_reg : sinq_prev_reg;"+"\n")
fproc_file.write("   assign cosq_prev_next = ((state_reg == 3'd0)&&(get_data == 1)) ? cosq_curr_reg :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 1)) ? cosq_curr_reg : cosq_prev_reg;"+"\n")
fproc_file.write("   assign qd_prev_next   = ((state_reg == 3'd0)&&(get_data == 1)) ? qd_curr_reg   :"+"\n")
fproc_file.write("                           ((state_reg == 3'd3)&&(get_data == 1)) ? qd_curr_reg   : qd_prev_reg;"+"\n")
fproc_file.write("   // v prev"+"\n")
fproc_file.write("   assign v_prev_vec_next_AX  = (state_reg == 3'd3) ? v_curr_vec_vaf_AX : v_prev_vec_reg_AX;"+"\n")
fproc_file.write("   assign v_prev_vec_next_AY  = (state_reg == 3'd3) ? v_curr_vec_vaf_AY : v_prev_vec_reg_AY;"+"\n")
fproc_file.write("   assign v_prev_vec_next_AZ  = (state_reg == 3'd3) ? v_curr_vec_vaf_AZ : v_prev_vec_reg_AZ;"+"\n")
fproc_file.write("   assign v_prev_vec_next_LX  = (state_reg == 3'd3) ? v_curr_vec_vaf_LX : v_prev_vec_reg_LX;"+"\n")
fproc_file.write("   assign v_prev_vec_next_LY  = (state_reg == 3'd3) ? v_curr_vec_vaf_LY : v_prev_vec_reg_LY;"+"\n")
fproc_file.write("   assign v_prev_vec_next_LZ  = (state_reg == 3'd3) ? v_curr_vec_vaf_LZ : v_prev_vec_reg_LZ;"+"\n")
fproc_file.write("   // a prev"+"\n")
fproc_file.write("   assign a_prev_vec_next_AX  = (state_reg == 3'd3) ? a_curr_vec_vaf_AX : a_prev_vec_reg_AX;"+"\n")
fproc_file.write("   assign a_prev_vec_next_AY  = (state_reg == 3'd3) ? a_curr_vec_vaf_AY : a_prev_vec_reg_AY;"+"\n")
fproc_file.write("   assign a_prev_vec_next_AZ  = (state_reg == 3'd3) ? a_curr_vec_vaf_AZ : a_prev_vec_reg_AZ;"+"\n")
fproc_file.write("   assign a_prev_vec_next_LX  = (state_reg == 3'd3) ? a_curr_vec_vaf_LX : a_prev_vec_reg_LX;"+"\n")
fproc_file.write("   assign a_prev_vec_next_LY  = (state_reg == 3'd3) ? a_curr_vec_vaf_LY : a_prev_vec_reg_LY;"+"\n")
fproc_file.write("   assign a_prev_vec_next_LZ  = (state_reg == 3'd3) ? a_curr_vec_vaf_LZ : a_prev_vec_reg_LZ;"+"\n")
fproc_file.write("   // f prev"+"\n")
fproc_file.write("   assign f_prev_vec_next_AX  = (state_reg == 3'd3) ? f_curr_vec_vaf_AX : f_prev_vec_reg_AX;"+"\n")
fproc_file.write("   assign f_prev_vec_next_AY  = (state_reg == 3'd3) ? f_curr_vec_vaf_AY : f_prev_vec_reg_AY;"+"\n")
fproc_file.write("   assign f_prev_vec_next_AZ  = (state_reg == 3'd3) ? f_curr_vec_vaf_AZ : f_prev_vec_reg_AZ;"+"\n")
fproc_file.write("   assign f_prev_vec_next_LX  = (state_reg == 3'd3) ? f_curr_vec_vaf_LX : f_prev_vec_reg_LX;"+"\n")
fproc_file.write("   assign f_prev_vec_next_LY  = (state_reg == 3'd3) ? f_curr_vec_vaf_LY : f_prev_vec_reg_LY;"+"\n")
fproc_file.write("   assign f_prev_vec_next_LZ  = (state_reg == 3'd3) ? f_curr_vec_vaf_LZ : f_prev_vec_reg_LZ;"+"\n")
fproc_file.write("   // v 2prev"+"\n")
fproc_file.write("   assign v_2prev_vec_next_AX = ((state_reg == 3'd0)&&(get_data == 1)) ? v_prev_vec_reg_AX :"+"\n")
fproc_file.write("                                ((state_reg == 3'd3)&&(get_data == 1)) ? v_prev_vec_reg_AX : v_2prev_vec_reg_AX;"+"\n")
fproc_file.write("   assign v_2prev_vec_next_AY = ((state_reg == 3'd0)&&(get_data == 1)) ? v_prev_vec_reg_AY :"+"\n")
fproc_file.write("                                ((state_reg == 3'd3)&&(get_data == 1)) ? v_prev_vec_reg_AY : v_2prev_vec_reg_AY;"+"\n")
fproc_file.write("   assign v_2prev_vec_next_AZ = ((state_reg == 3'd0)&&(get_data == 1)) ? v_prev_vec_reg_AZ :"+"\n")
fproc_file.write("                                ((state_reg == 3'd3)&&(get_data == 1)) ? v_prev_vec_reg_AZ : v_2prev_vec_reg_AZ;"+"\n")
fproc_file.write("   assign v_2prev_vec_next_LX = ((state_reg == 3'd0)&&(get_data == 1)) ? v_prev_vec_reg_LX :"+"\n")
fproc_file.write("                                ((state_reg == 3'd3)&&(get_data == 1)) ? v_prev_vec_reg_LX : v_2prev_vec_reg_LX;"+"\n")
fproc_file.write("   assign v_2prev_vec_next_LY = ((state_reg == 3'd0)&&(get_data == 1)) ? v_prev_vec_reg_LY :"+"\n")
fproc_file.write("                                ((state_reg == 3'd3)&&(get_data == 1)) ? v_prev_vec_reg_LY : v_2prev_vec_reg_LY;"+"\n")
fproc_file.write("   assign v_2prev_vec_next_LZ = ((state_reg == 3'd0)&&(get_data == 1)) ? v_prev_vec_reg_LZ :"+"\n")
fproc_file.write("                                ((state_reg == 3'd3)&&(get_data == 1)) ? v_prev_vec_reg_LZ : v_2prev_vec_reg_LZ;"+"\n")
fproc_file.write("   // a 2prev"+"\n")
fproc_file.write("   assign a_2prev_vec_next_AX = ((state_reg == 3'd0)&&(get_data == 1)) ? a_prev_vec_reg_AX :"+"\n")
fproc_file.write("                                ((state_reg == 3'd3)&&(get_data == 1)) ? a_prev_vec_reg_AX : a_2prev_vec_reg_AX;"+"\n")
fproc_file.write("   assign a_2prev_vec_next_AY = ((state_reg == 3'd0)&&(get_data == 1)) ? a_prev_vec_reg_AY :"+"\n")
fproc_file.write("                                ((state_reg == 3'd3)&&(get_data == 1)) ? a_prev_vec_reg_AY : a_2prev_vec_reg_AY;"+"\n")
fproc_file.write("   assign a_2prev_vec_next_AZ = ((state_reg == 3'd0)&&(get_data == 1)) ? a_prev_vec_reg_AZ :"+"\n")
fproc_file.write("                                ((state_reg == 3'd3)&&(get_data == 1)) ? a_prev_vec_reg_AZ : a_2prev_vec_reg_AZ;"+"\n")
fproc_file.write("   assign a_2prev_vec_next_LX = ((state_reg == 3'd0)&&(get_data == 1)) ? a_prev_vec_reg_LX :"+"\n")
fproc_file.write("                                ((state_reg == 3'd3)&&(get_data == 1)) ? a_prev_vec_reg_LX : a_2prev_vec_reg_LX;"+"\n")
fproc_file.write("   assign a_2prev_vec_next_LY = ((state_reg == 3'd0)&&(get_data == 1)) ? a_prev_vec_reg_LY :"+"\n")
fproc_file.write("                                ((state_reg == 3'd3)&&(get_data == 1)) ? a_prev_vec_reg_LY : a_2prev_vec_reg_LY;"+"\n")
fproc_file.write("   assign a_2prev_vec_next_LZ = ((state_reg == 3'd0)&&(get_data == 1)) ? a_prev_vec_reg_LZ :"+"\n")
fproc_file.write("                                ((state_reg == 3'd3)&&(get_data == 1)) ? a_prev_vec_reg_LZ : a_2prev_vec_reg_LZ;"+"\n")
fproc_file.write("\n")
#-------------------------------------------------------------------------------
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
fproc_file.write("   // external registers"+"\n")
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
fproc_file.write("   always @ (posedge clk or posedge reset)"+"\n")
fproc_file.write("   begin"+"\n")
fproc_file.write("      if (reset)"+"\n")
fproc_file.write("      begin"+"\n")
fproc_file.write("         // inputs"+"\n")
fproc_file.write("         get_data_reg <= 0;"+"\n")
fproc_file.write("         // output"+"\n")
fproc_file.write("         output_ready_reg <= 0;"+"\n")
fproc_file.write("         dummy_output_reg <= 0;"+"\n")
fproc_file.write("         // link"+"\n")
fproc_file.write("         link_in_reg <= "+str(vw.get_bitwidth(num_links+1))+"'d0;"+"\n")
fproc_file.write("         // state"+"\n")
fproc_file.write("         state_reg   <= 3'd0;"+"\n")
fproc_file.write("         s1_bool_reg <= 0;"+"\n")
fproc_file.write("         s2_bool_reg <= 0;"+"\n")
fproc_file.write("         s3_bool_reg <= 0;"+"\n")
fproc_file.write("         // sinq, cosq, and qd curr"+"\n")
fproc_file.write("         sinq_curr_reg <= 32'd0;"+"\n")
fproc_file.write("         cosq_curr_reg <= 32'd0;"+"\n")
fproc_file.write("         qd_curr_reg   <= 32'd0;"+"\n")
fproc_file.write("         qdd_curr_reg  <= 32'd0;"+"\n")
fproc_file.write("         // sinq, cosq, and qd prev"+"\n")
fproc_file.write("         sinq_prev_reg <= 32'd0;"+"\n")
fproc_file.write("         cosq_prev_reg <= 32'd0;"+"\n")
fproc_file.write("         qd_prev_reg   <= 32'd0;"+"\n")
fproc_file.write("         // v prev"+"\n")
fproc_file.write("         v_prev_vec_reg_AX <= 32'd0;"+"\n")
fproc_file.write("         v_prev_vec_reg_AY <= 32'd0;"+"\n")
fproc_file.write("         v_prev_vec_reg_AZ <= 32'd0;"+"\n")
fproc_file.write("         v_prev_vec_reg_LX <= 32'd0;"+"\n")
fproc_file.write("         v_prev_vec_reg_LY <= 32'd0;"+"\n")
fproc_file.write("         v_prev_vec_reg_LZ <= 32'd0;"+"\n")
fproc_file.write("         // a prev"+"\n")
fproc_file.write("         a_prev_vec_reg_AX <= 32'd0;"+"\n")
fproc_file.write("         a_prev_vec_reg_AY <= 32'd0;"+"\n")
fproc_file.write("         a_prev_vec_reg_AZ <= 32'd0;"+"\n")
fproc_file.write("         a_prev_vec_reg_LX <= 32'd0;"+"\n")
fproc_file.write("         a_prev_vec_reg_LY <= 32'd0;"+"\n")
fproc_file.write("         a_prev_vec_reg_LZ <= 32'd0;"+"\n")
fproc_file.write("         // f prev"+"\n")
fproc_file.write("         f_prev_vec_reg_AX <= 32'd0;"+"\n")
fproc_file.write("         f_prev_vec_reg_AY <= 32'd0;"+"\n")
fproc_file.write("         f_prev_vec_reg_AZ <= 32'd0;"+"\n")
fproc_file.write("         f_prev_vec_reg_LX <= 32'd0;"+"\n")
fproc_file.write("         f_prev_vec_reg_LY <= 32'd0;"+"\n")
fproc_file.write("         f_prev_vec_reg_LZ <= 32'd0;"+"\n")
fproc_file.write("         // v 2prev"+"\n")
fproc_file.write("         v_2prev_vec_reg_AX <= 32'd0;"+"\n")
fproc_file.write("         v_2prev_vec_reg_AY <= 32'd0;"+"\n")
fproc_file.write("         v_2prev_vec_reg_AZ <= 32'd0;"+"\n")
fproc_file.write("         v_2prev_vec_reg_LX <= 32'd0;"+"\n")
fproc_file.write("         v_2prev_vec_reg_LY <= 32'd0;"+"\n")
fproc_file.write("         v_2prev_vec_reg_LZ <= 32'd0;"+"\n")
fproc_file.write("         // a 2prev"+"\n")
fproc_file.write("         a_2prev_vec_reg_AX <= 32'd0;"+"\n")
fproc_file.write("         a_2prev_vec_reg_AY <= 32'd0;"+"\n")
fproc_file.write("         a_2prev_vec_reg_AZ <= 32'd0;"+"\n")
fproc_file.write("         a_2prev_vec_reg_LX <= 32'd0;"+"\n")
fproc_file.write("         a_2prev_vec_reg_LY <= 32'd0;"+"\n")
fproc_file.write("         a_2prev_vec_reg_LZ <= 32'd0;"+"\n")
fproc_file.write("      end"+"\n")
fproc_file.write("      else"+"\n")
fproc_file.write("      begin"+"\n")
fproc_file.write("         // inputs"+"\n")
fproc_file.write("         get_data_reg <= get_data_next;"+"\n")
fproc_file.write("         // output"+"\n")
fproc_file.write("         output_ready_reg <= output_ready_next;"+"\n")
fproc_file.write("         dummy_output_reg <= dummy_output_next;"+"\n")
fproc_file.write("         // link"+"\n")
fproc_file.write("         link_in_reg <= link_in_next;"+"\n")
fproc_file.write("         // state"+"\n")
fproc_file.write("         state_reg   <= state_next;"+"\n")
fproc_file.write("         s1_bool_reg <= s1_bool_next;"+"\n")
fproc_file.write("         s2_bool_reg <= s2_bool_next;"+"\n")
fproc_file.write("         s3_bool_reg <= s3_bool_next;"+"\n")
fproc_file.write("         // sinq, cosq, and qd curr"+"\n")
fproc_file.write("         sinq_curr_reg <= sinq_curr_next;"+"\n")
fproc_file.write("         cosq_curr_reg <= cosq_curr_next;"+"\n")
fproc_file.write("         qd_curr_reg   <= qd_curr_next;"+"\n")
fproc_file.write("         qdd_curr_reg  <= qdd_curr_next;"+"\n")
fproc_file.write("         // sinq, cosq, and qd prev"+"\n")
fproc_file.write("         sinq_prev_reg <= sinq_prev_next;"+"\n")
fproc_file.write("         cosq_prev_reg <= cosq_prev_next;"+"\n")
fproc_file.write("         qd_prev_reg   <= qd_prev_next;"+"\n")
fproc_file.write("         // v prev"+"\n")
fproc_file.write("         v_prev_vec_reg_AX <= v_prev_vec_next_AX;"+"\n")
fproc_file.write("         v_prev_vec_reg_AY <= v_prev_vec_next_AY;"+"\n")
fproc_file.write("         v_prev_vec_reg_AZ <= v_prev_vec_next_AZ;"+"\n")
fproc_file.write("         v_prev_vec_reg_LX <= v_prev_vec_next_LX;"+"\n")
fproc_file.write("         v_prev_vec_reg_LY <= v_prev_vec_next_LY;"+"\n")
fproc_file.write("         v_prev_vec_reg_LZ <= v_prev_vec_next_LZ;"+"\n")
fproc_file.write("         // a prev"+"\n")
fproc_file.write("         a_prev_vec_reg_AX <= a_prev_vec_next_AX;"+"\n")
fproc_file.write("         a_prev_vec_reg_AY <= a_prev_vec_next_AY;"+"\n")
fproc_file.write("         a_prev_vec_reg_AZ <= a_prev_vec_next_AZ;"+"\n")
fproc_file.write("         a_prev_vec_reg_LX <= a_prev_vec_next_LX;"+"\n")
fproc_file.write("         a_prev_vec_reg_LY <= a_prev_vec_next_LY;"+"\n")
fproc_file.write("         a_prev_vec_reg_LZ <= a_prev_vec_next_LZ;"+"\n")
fproc_file.write("         // f prev"+"\n")
fproc_file.write("         f_prev_vec_reg_AX <= f_prev_vec_next_AX;"+"\n")
fproc_file.write("         f_prev_vec_reg_AY <= f_prev_vec_next_AY;"+"\n")
fproc_file.write("         f_prev_vec_reg_AZ <= f_prev_vec_next_AZ;"+"\n")
fproc_file.write("         f_prev_vec_reg_LX <= f_prev_vec_next_LX;"+"\n")
fproc_file.write("         f_prev_vec_reg_LY <= f_prev_vec_next_LY;"+"\n")
fproc_file.write("         f_prev_vec_reg_LZ <= f_prev_vec_next_LZ;"+"\n")
fproc_file.write("         // v 2prev"+"\n")
fproc_file.write("         v_2prev_vec_reg_AX <= v_2prev_vec_next_AX;"+"\n")
fproc_file.write("         v_2prev_vec_reg_AY <= v_2prev_vec_next_AY;"+"\n")
fproc_file.write("         v_2prev_vec_reg_AZ <= v_2prev_vec_next_AZ;"+"\n")
fproc_file.write("         v_2prev_vec_reg_LX <= v_2prev_vec_next_LX;"+"\n")
fproc_file.write("         v_2prev_vec_reg_LY <= v_2prev_vec_next_LY;"+"\n")
fproc_file.write("         v_2prev_vec_reg_LZ <= v_2prev_vec_next_LZ;"+"\n")
fproc_file.write("         // a 2prev"+"\n")
fproc_file.write("         a_2prev_vec_reg_AX <= a_2prev_vec_next_AX;"+"\n")
fproc_file.write("         a_2prev_vec_reg_AY <= a_2prev_vec_next_AY;"+"\n")
fproc_file.write("         a_2prev_vec_reg_AZ <= a_2prev_vec_next_AZ;"+"\n")
fproc_file.write("         a_2prev_vec_reg_LX <= a_2prev_vec_next_LX;"+"\n")
fproc_file.write("         a_2prev_vec_reg_LY <= a_2prev_vec_next_LY;"+"\n")
fproc_file.write("         a_2prev_vec_reg_LZ <= a_2prev_vec_next_LZ;"+"\n")
fproc_file.write("      end"+"\n")
fproc_file.write("   end"+"\n")
fproc_file.write("\n")
#-------------------------------------------------------------------------------
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
fproc_file.write("   // ID muxes"+"\n")
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
fproc_file.write("   // v prev"+"\n")
fproc_file.write("   assign v_prev_vec_out_AX  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : v_prev_vec_reg_AX;"+"\n")
fproc_file.write("   assign v_prev_vec_out_AY  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : v_prev_vec_reg_AY;"+"\n")
fproc_file.write("   assign v_prev_vec_out_AZ  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : v_prev_vec_reg_AZ;"+"\n")
fproc_file.write("   assign v_prev_vec_out_LX  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : v_prev_vec_reg_LX;"+"\n")
fproc_file.write("   assign v_prev_vec_out_LY  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : v_prev_vec_reg_LY;"+"\n")
fproc_file.write("   assign v_prev_vec_out_LZ  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : v_prev_vec_reg_LZ;"+"\n")
fproc_file.write("   // a prev"+"\n")
fproc_file.write("   assign a_prev_vec_out_AX  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : a_prev_vec_reg_AX;"+"\n")
fproc_file.write("   assign a_prev_vec_out_AY  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : a_prev_vec_reg_AY;"+"\n")
fproc_file.write("   assign a_prev_vec_out_AZ  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : a_prev_vec_reg_AZ;"+"\n")
fproc_file.write("   assign a_prev_vec_out_LX  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : a_prev_vec_reg_LX;"+"\n")
fproc_file.write("   assign a_prev_vec_out_LY  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : a_prev_vec_reg_LY;"+"\n")
fproc_file.write("   assign a_prev_vec_out_LZ  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : a_prev_vec_reg_LZ;"+"\n")
fproc_file.write("   // f prev"+"\n")
fproc_file.write("   assign f_prev_vec_out_AX  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : f_prev_vec_reg_AX;"+"\n")
fproc_file.write("   assign f_prev_vec_out_AY  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : f_prev_vec_reg_AY;"+"\n")
fproc_file.write("   assign f_prev_vec_out_AZ  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : f_prev_vec_reg_AZ;"+"\n")
fproc_file.write("   assign f_prev_vec_out_LX  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : f_prev_vec_reg_LX;"+"\n")
fproc_file.write("   assign f_prev_vec_out_LY  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : f_prev_vec_reg_LY;"+"\n")
fproc_file.write("   assign f_prev_vec_out_LZ  = (link_in_reg == "+bitwidth_num_links_str+"'d1) ? 32'd0 : f_prev_vec_reg_LZ;"+"\n")
fproc_file.write("\n")
#-------------------------------------------------------------------------------
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
fproc_file.write("   // ID"+"\n")
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
fproc_file.write("   wire ["+str(vw.get_bitwidth_array_def(num_links))+":0] link_in_3bits;"+"\n")
fproc_file.write("   assign link_in_3bits = link_in_reg;"+"\n")
fproc_file.write("   rneafpx#(.WIDTH(WIDTH),.DECIMAL_BITS(DECIMAL_BITS))"+"\n")
fproc_file.write("      rneafpi("+"\n")
fproc_file.write("      // clock"+"\n")
fproc_file.write("      .clk(clk),"+"\n")
fproc_file.write("      // stage booleans"+"\n")
fproc_file.write("      .s1_bool_in(s1_bool_reg),.s2_bool_in(s2_bool_reg),.s3_bool_in(s3_bool_reg),"+"\n")
fproc_file.write("      // link_in"+"\n")
fproc_file.write("      .link_in(link_in_3bits),"+"\n")
fproc_file.write("      // sin(q) and cos(q)"+"\n")
fproc_file.write("      .sinq_curr_in(sinq_curr_reg),.cosq_curr_in(cosq_curr_reg),"+"\n")
fproc_file.write("      // qd_curr_in"+"\n")
fproc_file.write("      .qd_curr_in(qd_curr_reg),"+"\n")
fproc_file.write("      // qdd_curr_in"+"\n")
fproc_file.write("      .qdd_curr_in(qdd_curr_reg),"+"\n")
fproc_file.write("      // v_prev_vec_in, 6 values"+"\n")
fproc_file.write("      .v_prev_vec_in_AX(v_prev_vec_out_AX),.v_prev_vec_in_AY(v_prev_vec_out_AY),.v_prev_vec_in_AZ(v_prev_vec_out_AZ),.v_prev_vec_in_LX(v_prev_vec_out_LX),.v_prev_vec_in_LY(v_prev_vec_out_LY),.v_prev_vec_in_LZ(v_prev_vec_out_LZ),"+"\n")
fproc_file.write("      // a_prev_vec_in, 6 values"+"\n")
fproc_file.write("      .a_prev_vec_in_AX(a_prev_vec_out_AX),.a_prev_vec_in_AY(a_prev_vec_out_AY),.a_prev_vec_in_AZ(a_prev_vec_out_AZ),.a_prev_vec_in_LX(a_prev_vec_out_LX),.a_prev_vec_in_LY(a_prev_vec_out_LY),.a_prev_vec_in_LZ(a_prev_vec_out_LZ),"+"\n")
fproc_file.write("      // v_curr_vec_out, 6 values"+"\n")
fproc_file.write("      .v_curr_vec_out_AX(v_curr_vec_vaf_AX),.v_curr_vec_out_AY(v_curr_vec_vaf_AY),.v_curr_vec_out_AZ(v_curr_vec_vaf_AZ),.v_curr_vec_out_LX(v_curr_vec_vaf_LX),.v_curr_vec_out_LY(v_curr_vec_vaf_LY),.v_curr_vec_out_LZ(v_curr_vec_vaf_LZ),"+"\n")
fproc_file.write("      // a_curr_vec_out, 6 values"+"\n")
fproc_file.write("      .a_curr_vec_out_AX(a_curr_vec_vaf_AX),.a_curr_vec_out_AY(a_curr_vec_vaf_AY),.a_curr_vec_out_AZ(a_curr_vec_vaf_AZ),.a_curr_vec_out_LX(a_curr_vec_vaf_LX),.a_curr_vec_out_LY(a_curr_vec_vaf_LY),.a_curr_vec_out_LZ(a_curr_vec_vaf_LZ),"+"\n")
fproc_file.write("      // f_curr_vec_out, 6 values"+"\n")
fproc_file.write("      .f_curr_vec_out_AX(f_curr_vec_vaf_AX),.f_curr_vec_out_AY(f_curr_vec_vaf_AY),.f_curr_vec_out_AZ(f_curr_vec_vaf_AZ),.f_curr_vec_out_LX(f_curr_vec_vaf_LX),.f_curr_vec_out_LY(f_curr_vec_vaf_LY),.f_curr_vec_out_LZ(f_curr_vec_vaf_LZ)"+"\n")
fproc_file.write("      );"+"\n")
fproc_file.write("\n")
#-------------------------------------------------------------------------------
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
fproc_file.write("   // input muxes"+"\n")
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
fproc_file.write("   // gradients link"+"\n")
fproc_file.write("   assign grad_link = (link_in_reg == {bitwidth}'d0) ? {bitwidth}'d0 : link_in_sub1;".format(bitwidth=vw.get_bitwidth(num_links+1))+"\n")
fproc_file.write("   // sinq, cosq, and qd prev"+"\n")
fproc_file.write("   assign sinq_prev_mux      = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : sinq_prev_reg;"+"\n")
fproc_file.write("   assign cosq_prev_mux      = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : cosq_prev_reg;"+"\n")
fproc_file.write("   assign qd_prev_mux        = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : qd_prev_reg;"+"\n")
fproc_file.write("   // v prev"+"\n")
fproc_file.write("   assign v_prev_vec_mux_AX  = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : v_prev_vec_reg_AX;"+"\n")
fproc_file.write("   assign v_prev_vec_mux_AY  = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : v_prev_vec_reg_AY;"+"\n")
fproc_file.write("   assign v_prev_vec_mux_AZ  = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : v_prev_vec_reg_AZ;"+"\n")
fproc_file.write("   assign v_prev_vec_mux_LX  = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : v_prev_vec_reg_LX;"+"\n")
fproc_file.write("   assign v_prev_vec_mux_LY  = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : v_prev_vec_reg_LY;"+"\n")
fproc_file.write("   assign v_prev_vec_mux_LZ  = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : v_prev_vec_reg_LZ;"+"\n")
fproc_file.write("   // a prev"+"\n")
fproc_file.write("   assign a_prev_vec_mux_AX  = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : a_prev_vec_reg_AX;"+"\n")
fproc_file.write("   assign a_prev_vec_mux_AY  = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : a_prev_vec_reg_AY;"+"\n")
fproc_file.write("   assign a_prev_vec_mux_AZ  = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : a_prev_vec_reg_AZ;"+"\n")
fproc_file.write("   assign a_prev_vec_mux_LX  = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : a_prev_vec_reg_LX;"+"\n")
fproc_file.write("   assign a_prev_vec_mux_LY  = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : a_prev_vec_reg_LY;"+"\n")
fproc_file.write("   assign a_prev_vec_mux_LZ  = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : a_prev_vec_reg_LZ;"+"\n")
fproc_file.write("   // v 2prev"+"\n")
fproc_file.write("   assign v_2prev_vec_mux_AX = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : v_2prev_vec_reg_AX;"+"\n")
fproc_file.write("   assign v_2prev_vec_mux_AY = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : v_2prev_vec_reg_AY;"+"\n")
fproc_file.write("   assign v_2prev_vec_mux_AZ = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : v_2prev_vec_reg_AZ;"+"\n")
fproc_file.write("   assign v_2prev_vec_mux_LX = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : v_2prev_vec_reg_LX;"+"\n")
fproc_file.write("   assign v_2prev_vec_mux_LY = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : v_2prev_vec_reg_LY;"+"\n")
fproc_file.write("   assign v_2prev_vec_mux_LZ = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : v_2prev_vec_reg_LZ;"+"\n")
fproc_file.write("   // a 2prev"+"\n")
fproc_file.write("   assign a_2prev_vec_mux_AX = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : a_2prev_vec_reg_AX;"+"\n")
fproc_file.write("   assign a_2prev_vec_mux_AY = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : a_2prev_vec_reg_AY;"+"\n")
fproc_file.write("   assign a_2prev_vec_mux_AZ = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : a_2prev_vec_reg_AZ;"+"\n")
fproc_file.write("   assign a_2prev_vec_mux_LX = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : a_2prev_vec_reg_LX;"+"\n")
fproc_file.write("   assign a_2prev_vec_mux_LY = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : a_2prev_vec_reg_LY;"+"\n")
fproc_file.write("   assign a_2prev_vec_mux_LZ = (grad_link == "+bitwidth_num_links_str+"'d0) ? 32'd0 : a_2prev_vec_reg_LZ;"+"\n")
fproc_file.write("\n")
#-------------------------------------------------------------------------------
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
fproc_file.write("   // mcross booleans"+"\n")
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
indent = "   "
writeMCrossBooleans(fproc_file,num_links,indent)
fproc_file.write("\n")
#-------------------------------------------------------------------------------
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
fproc_file.write("   // dID/dq"+"\n")
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
indent = "   "
for link in range(1,num_links+1):
   fproc_file.write("\n")
   writeDQJoint(link,fproc_file,dim_list,indent)
fproc_file.write("\n")
#-------------------------------------------------------------------------------
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
fproc_file.write("   // dID/dqd"+"\n")
fproc_file.write("   //---------------------------------------------------------------------------"+"\n")
indent = "   "
for link in range(1,num_links+1):
   fproc_file.write("\n")
   writeDQDJoint(link,fproc_file,dim_list,indent)
fproc_file.write("\n")
#-------------------------------------------------------------------------------
fproc_file.write("endmodule"+"\n")
#-------------------------------------------------------------------------------

# Close file
fproc_file.close()
