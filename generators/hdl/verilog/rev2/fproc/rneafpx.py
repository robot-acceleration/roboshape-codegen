from URDFParser import URDFParser
from FPGACodegen import FPGACodegen
from util import VerilogWriter, FileManager
from rbd_config import dim_list, urdf_file

#---------------------------------------------

parser = URDFParser()
robot = parser.parse(urdf_file)
fpga_codegen = FPGACodegen(robot)

#-------- urdf attrs needed for codegen-ing this file ----------------

num_links = robot.get_num_links_effective()
xform_bools_full = fpga_codegen.get_Xmat_sparsity_boolean_matrix_OR()
xform_bools = fpga_codegen.left_half_matrix(xform_bools_full)

#-------- File management -------------------

fm = FileManager("rneafpx.v")
output_file_path = fm.get_output_file_path()
rneafpx_file = open(output_file_path, "w")

vw = VerilogWriter(rneafpx_file, dim_list, num_links)

#-------------------------------------------------------------------------------

# Make Stage 2&3 Transform Input Registers
def makeStage2n3XformInputRegs(dim_list,xform_bools):
   mat_str = ""
   mat_str = mat_str+"   reg signed[(WIDTH-1):0]"+"\n"
   xfm_str = ""
   xfm_str = vw.makeXformMatString("xform_in_",xform_bools,"               ","      ")
   mat_str = mat_str+xfm_str
   mat_str = mat_str+";"+"\n"
   return mat_str

# Make Stage 2&3 Transform Input Nonblocking Assignments
def makeStage2n3XformInputNonblockingAssignment(dim_list,xform_bools):
   mat_str = ""
   xfm_str = ""
   xfm_str = vw.makeXformMatNonblockingAssignmentString("xform_in_","xform_out_",xform_bools,"      ")
   mat_str = mat_str+xfm_str+"\n"
   return mat_str

#-------------------------------------------------------------------------------
rneafpx_file.write("`timescale 1ns / 1ps"+"\n")
rneafpx_file.write("\n")
rneafpx_file.write("// RNEA for Link i"+"\n")
rneafpx_file.write("\n")
rneafpx_file.write("//------------------------------------------------------------------------------"+"\n")
rneafpx_file.write("// rneafpx Module"+"\n")
rneafpx_file.write("//------------------------------------------------------------------------------"+"\n")
rneafpx_file.write("module rneafpx#(parameter WIDTH = 32,parameter DECIMAL_BITS = 16)("+"\n")
rneafpx_file.write("   // clock"+"\n")
rneafpx_file.write("   input  clk,"+"\n")
rneafpx_file.write("   // stage booleans"+"\n")
rneafpx_file.write("   input"+"\n")
rneafpx_file.write("      s1_bool_in,s2_bool_in,s3_bool_in,"+"\n")
rneafpx_file.write("   // link_in"+"\n")
rneafpx_file.write("   input  ["+str(vw.get_bitwidth_array_def(num_links))+":0]"+"\n")
rneafpx_file.write("      link_in,"+"\n")
rneafpx_file.write("   // sin(q) and cos(q)"+"\n")
rneafpx_file.write("   input  signed[(WIDTH-1):0]"+"\n")
rneafpx_file.write("      sinq_curr_in,cosq_curr_in,"+"\n")
rneafpx_file.write("   // qd_curr_in"+"\n")
rneafpx_file.write("   input  signed[(WIDTH-1):0]"+"\n")
rneafpx_file.write("      qd_curr_in,"+"\n")
rneafpx_file.write("   // qdd_curr_in"+"\n")
rneafpx_file.write("   input  signed[(WIDTH-1):0]"+"\n")
rneafpx_file.write("      qdd_curr_in,"+"\n")
rneafpx_file.write("   // v_prev_vec_in, 6 values"+"\n")
rneafpx_file.write("   input  signed[(WIDTH-1):0]"+"\n")
rneafpx_file.write("      v_prev_vec_in_AX,v_prev_vec_in_AY,v_prev_vec_in_AZ,v_prev_vec_in_LX,v_prev_vec_in_LY,v_prev_vec_in_LZ,"+"\n")
rneafpx_file.write("   // a_prev_vec_in, 6 values"+"\n")
rneafpx_file.write("   input  signed[(WIDTH-1):0]"+"\n")
rneafpx_file.write("      a_prev_vec_in_AX,a_prev_vec_in_AY,a_prev_vec_in_AZ,a_prev_vec_in_LX,a_prev_vec_in_LY,a_prev_vec_in_LZ,"+"\n")
rneafpx_file.write("   // v_curr_vec_out, 6 values"+"\n")
rneafpx_file.write("   output signed[(WIDTH-1):0]"+"\n")
rneafpx_file.write("      v_curr_vec_out_AX,v_curr_vec_out_AY,v_curr_vec_out_AZ,v_curr_vec_out_LX,v_curr_vec_out_LY,v_curr_vec_out_LZ,"+"\n")
rneafpx_file.write("   // a_curr_vec_out, 6 values"+"\n")
rneafpx_file.write("   output signed[(WIDTH-1):0]"+"\n")
rneafpx_file.write("      a_curr_vec_out_AX,a_curr_vec_out_AY,a_curr_vec_out_AZ,a_curr_vec_out_LX,a_curr_vec_out_LY,a_curr_vec_out_LZ,"+"\n")
rneafpx_file.write("   // f_curr_vec_out, 6 values"+"\n")
rneafpx_file.write("   output signed[(WIDTH-1):0]"+"\n")
rneafpx_file.write("      f_curr_vec_out_AX,f_curr_vec_out_AY,f_curr_vec_out_AZ,f_curr_vec_out_LX,f_curr_vec_out_LY,f_curr_vec_out_LZ"+"\n")
rneafpx_file.write("   );"+"\n")
rneafpx_file.write("\n")
rneafpx_file.write("   //---------------------------------------------------------------------------"+"\n")
rneafpx_file.write("   // internal wires and state"+"\n")
rneafpx_file.write("   //---------------------------------------------------------------------------"+"\n")
rneafpx_file.write("   // control inputs"+"\n")
rneafpx_file.write("   wire"+"\n")
rneafpx_file.write("      s1_bool,s2_bool,s3_bool;"+"\n")
rneafpx_file.write("   // stage 1 inputs"+"\n")
rneafpx_file.write("   wire signed[(WIDTH-1):0]"+"\n")
rneafpx_file.write("      sinq_in,cosq_in;"+"\n")
rneafpx_file.write("   wire signed[(WIDTH-1):0]"+"\n")
rneafpx_file.write("      s1r2_in_AX,s1r2_in_AY,s1r2_in_AZ,s1r2_in_LX,s1r2_in_LY,s1r2_in_LZ,"+"\n")
rneafpx_file.write("      s1r3_in,"+"\n")
rneafpx_file.write("      s1r4_in_AX,s1r4_in_AY,s1r4_in_AZ,s1r4_in_LX,s1r4_in_LY,s1r4_in_LZ,"+"\n")
rneafpx_file.write("      s1r5_in;"+"\n")
#-------------------------------------------------------------------------------
rneafpx_file.write("   // stage 2&3 xform inputs"+"\n")
mat_str = makeStage2n3XformInputRegs(dim_list,xform_bools)
rneafpx_file.write(mat_str)
#-------------------------------------------------------------------------------
rneafpx_file.write("   // stage 2 inputs"+"\n")
rneafpx_file.write("   reg signed[(WIDTH-1):0]"+"\n")
rneafpx_file.write("      s2r3_in_AX,s2r3_in_AY,s2r3_in_AZ,s2r3_in_LX,s2r3_in_LY,s2r3_in_LZ,"+"\n")
rneafpx_file.write("      s2r4_in,"+"\n")
rneafpx_file.write("      s2r5_in_AX,s2r5_in_AY,s2r5_in_AZ,s2r5_in_LX,s2r5_in_LY,s2r5_in_LZ,"+"\n")
rneafpx_file.write("      s2r6_in;"+"\n")
rneafpx_file.write("   // stage 3 inputs"+"\n")
rneafpx_file.write("   reg signed[(WIDTH-1):0]"+"\n")
rneafpx_file.write("      s3r2_in_AX,s3r2_in_AY,s3r2_in_AZ,s3r2_in_LX,s3r2_in_LY,s3r2_in_LZ,"+"\n")
rneafpx_file.write("      s3r3_in_AX,s3r3_in_AY,s3r3_in_AZ,s3r3_in_LX,s3r3_in_LY,s3r3_in_LZ,"+"\n")
rneafpx_file.write("      s3r4_in_AX,s3r4_in_AY,s3r4_in_AZ,s3r4_in_LX,s3r4_in_LY,s3r4_in_LZ,"+"\n")
rneafpx_file.write("      s3r5_in_AX,s3r5_in_AY,s3r5_in_AZ,s3r5_in_LX,s3r5_in_LY,s3r5_in_LZ;"+"\n")
rneafpx_file.write("   // stage 1 outputs"+"\n")
rneafpx_file.write("   wire signed[(WIDTH-1):0]"+"\n")
rneafpx_file.write("      s1r3_out_AX,s1r3_out_AY,s1r3_out_AZ,s1r3_out_LX,s1r3_out_LY,s1r3_out_LZ,"+"\n")
rneafpx_file.write("      s1r4_out,"+"\n")
rneafpx_file.write("      s1r5_out_AX,s1r5_out_AY,s1r5_out_AZ,s1r5_out_LX,s1r5_out_LY,s1r5_out_LZ,"+"\n")
rneafpx_file.write("      s1r6_out;"+"\n")
rneafpx_file.write("   // stage 2 outputs"+"\n")
rneafpx_file.write("   wire signed[(WIDTH-1):0]"+"\n")
rneafpx_file.write("      s2r2_out_AX,s2r2_out_AY,s2r2_out_AZ,s2r2_out_LX,s2r2_out_LY,s2r2_out_LZ,"+"\n")
rneafpx_file.write("      s2r3_out_AX,s2r3_out_AY,s2r3_out_AZ,s2r3_out_LX,s2r3_out_LY,s2r3_out_LZ,"+"\n")
rneafpx_file.write("      s2r4_out_AX,s2r4_out_AY,s2r4_out_AZ,s2r4_out_LX,s2r4_out_LY,s2r4_out_LZ,"+"\n")
rneafpx_file.write("      s2r5_out_AX,s2r5_out_AY,s2r5_out_AZ,s2r5_out_LX,s2r5_out_LY,s2r5_out_LZ;"+"\n")
rneafpx_file.write("   // stage 3 outputs"+"\n")
rneafpx_file.write("   wire signed[(WIDTH-1):0]"+"\n")
rneafpx_file.write("      s3r1_out_AX,s3r1_out_AY,s3r1_out_AZ,s3r1_out_LX,s3r1_out_LY,s3r1_out_LZ,"+"\n")
rneafpx_file.write("      s3r2_out_AX,s3r2_out_AY,s3r2_out_AZ,s3r2_out_LX,s3r2_out_LY,s3r2_out_LZ,"+"\n")
rneafpx_file.write("      s3r3_out_AX,s3r3_out_AY,s3r3_out_AZ,s3r3_out_LX,s3r3_out_LY,s3r3_out_LZ;"+"\n")
#-------------------------------------------------------------------------------
rneafpx_file.write("   // xform outputs"+"\n")
mat_str = vw.makeXformOutputWires(xform_bools)
rneafpx_file.write(mat_str)
#-------------------------------------------------------------------------------
rneafpx_file.write("   // mcross"+"\n")
rneafpx_file.write("   wire mcross;"+"\n")
rneafpx_file.write("\n")
rneafpx_file.write("   //---------------------------------------------------------------------------"+"\n")
rneafpx_file.write("   // sequential"+"\n")
rneafpx_file.write("   //---------------------------------------------------------------------------"+"\n")
rneafpx_file.write("   always @ (posedge clk)"+"\n")
rneafpx_file.write("   begin"+"\n")
#-------------------------------------------------------------------------------
rneafpx_file.write("      // stage 2&3 xform inputs"+"\n")
mat_str = makeStage2n3XformInputNonblockingAssignment(dim_list,xform_bools)
rneafpx_file.write(mat_str)
#-------------------------------------------------------------------------------
rneafpx_file.write("      // stage 2 inputs"+"\n")
rneafpx_file.write("      s2r3_in_AX <= s1r3_out_AX;"+"\n")
rneafpx_file.write("      s2r3_in_AY <= s1r3_out_AY;"+"\n")
rneafpx_file.write("      s2r3_in_AZ <= s1r3_out_AZ;"+"\n")
rneafpx_file.write("      s2r3_in_LX <= s1r3_out_LX;"+"\n")
rneafpx_file.write("      s2r3_in_LY <= s1r3_out_LY;"+"\n")
rneafpx_file.write("      s2r3_in_LZ <= s1r3_out_LZ;"+"\n")
rneafpx_file.write("      s2r4_in <= s1r4_out;"+"\n")
rneafpx_file.write("      s2r5_in_AX <= s1r5_out_AX;"+"\n")
rneafpx_file.write("      s2r5_in_AY <= s1r5_out_AY;"+"\n")
rneafpx_file.write("      s2r5_in_AZ <= s1r5_out_AZ;"+"\n")
rneafpx_file.write("      s2r5_in_LX <= s1r5_out_LX;"+"\n")
rneafpx_file.write("      s2r5_in_LY <= s1r5_out_LY;"+"\n")
rneafpx_file.write("      s2r5_in_LZ <= s1r5_out_LZ;"+"\n")
rneafpx_file.write("      s2r6_in <= s1r6_out;"+"\n")
rneafpx_file.write("      // stage 3 inputs"+"\n")
rneafpx_file.write("      s3r2_in_AX <= s2r2_out_AX;"+"\n")
rneafpx_file.write("      s3r2_in_AY <= s2r2_out_AY;"+"\n")
rneafpx_file.write("      s3r2_in_AZ <= s2r2_out_AZ;"+"\n")
rneafpx_file.write("      s3r2_in_LX <= s2r2_out_LX;"+"\n")
rneafpx_file.write("      s3r2_in_LY <= s2r2_out_LY;"+"\n")
rneafpx_file.write("      s3r2_in_LZ <= s2r2_out_LZ;"+"\n")
rneafpx_file.write("      s3r3_in_AX <= s2r3_out_AX;"+"\n")
rneafpx_file.write("      s3r3_in_AY <= s2r3_out_AY;"+"\n")
rneafpx_file.write("      s3r3_in_AZ <= s2r3_out_AZ;"+"\n")
rneafpx_file.write("      s3r3_in_LX <= s2r3_out_LX;"+"\n")
rneafpx_file.write("      s3r3_in_LY <= s2r3_out_LY;"+"\n")
rneafpx_file.write("      s3r3_in_LZ <= s2r3_out_LZ;"+"\n")
rneafpx_file.write("      s3r4_in_AX <= s2r4_out_AX;"+"\n")
rneafpx_file.write("      s3r4_in_AY <= s2r4_out_AY;"+"\n")
rneafpx_file.write("      s3r4_in_AZ <= s2r4_out_AZ;"+"\n")
rneafpx_file.write("      s3r4_in_LX <= s2r4_out_LX;"+"\n")
rneafpx_file.write("      s3r4_in_LY <= s2r4_out_LY;"+"\n")
rneafpx_file.write("      s3r4_in_LZ <= s2r4_out_LZ;"+"\n")
rneafpx_file.write("      s3r5_in_AX <= s2r5_out_AX;"+"\n")
rneafpx_file.write("      s3r5_in_AY <= s2r5_out_AY;"+"\n")
rneafpx_file.write("      s3r5_in_AZ <= s2r5_out_AZ;"+"\n")
rneafpx_file.write("      s3r5_in_LX <= s2r5_out_LX;"+"\n")
rneafpx_file.write("      s3r5_in_LY <= s2r5_out_LY;"+"\n")
rneafpx_file.write("      s3r5_in_LZ <= s2r5_out_LZ;"+"\n")
rneafpx_file.write("   end"+"\n")
rneafpx_file.write("\n")
rneafpx_file.write("   //---------------------------------------------------------------------------"+"\n")
rneafpx_file.write("   // combinational"+"\n")
rneafpx_file.write("   //---------------------------------------------------------------------------"+"\n")
rneafpx_file.write("   // control inputs"+"\n")
rneafpx_file.write("   assign s1_bool = s1_bool_in;"+"\n")
rneafpx_file.write("   assign s2_bool = s2_bool_in;"+"\n")
rneafpx_file.write("   assign s3_bool = s3_bool_in;"+"\n")
rneafpx_file.write("   // stage 1 inputs"+"\n")
rneafpx_file.write("   assign sinq_in = sinq_curr_in;"+"\n")
rneafpx_file.write("   assign cosq_in = cosq_curr_in;"+"\n")
rneafpx_file.write("   assign s1r2_in_AX = a_prev_vec_in_AX;"+"\n")
rneafpx_file.write("   assign s1r2_in_AY = a_prev_vec_in_AY;"+"\n")
rneafpx_file.write("   assign s1r2_in_AZ = a_prev_vec_in_AZ;"+"\n")
rneafpx_file.write("   assign s1r2_in_LX = a_prev_vec_in_LX;"+"\n")
rneafpx_file.write("   assign s1r2_in_LY = a_prev_vec_in_LY;"+"\n")
rneafpx_file.write("   assign s1r2_in_LZ = a_prev_vec_in_LZ;"+"\n")
rneafpx_file.write("   assign s1r3_in = qd_curr_in;"+"\n")
rneafpx_file.write("   assign s1r4_in_AX = v_prev_vec_in_AX;"+"\n")
rneafpx_file.write("   assign s1r4_in_AY = v_prev_vec_in_AY;"+"\n")
rneafpx_file.write("   assign s1r4_in_AZ = v_prev_vec_in_AZ;"+"\n")
rneafpx_file.write("   assign s1r4_in_LX = v_prev_vec_in_LX;"+"\n")
rneafpx_file.write("   assign s1r4_in_LY = v_prev_vec_in_LY;"+"\n")
rneafpx_file.write("   assign s1r4_in_LZ = v_prev_vec_in_LZ;"+"\n")
rneafpx_file.write("   assign s1r5_in = qdd_curr_in;"+"\n")
rneafpx_file.write("   // mcross"+"\n")
rneafpx_file.write("   assign mcross = 0;"+"\n")
rneafpx_file.write("\n")
rneafpx_file.write("   rneafpxfold#(.WIDTH(WIDTH),.DECIMAL_BITS(DECIMAL_BITS))"+"\n")
rneafpx_file.write("      rneafpxfolded("+"\n")
rneafpx_file.write("      // link_in"+"\n")
rneafpx_file.write("      .link_in(link_in),"+"\n")
rneafpx_file.write("      // sin(q) and cos(q)"+"\n")
rneafpx_file.write("      .sinq_in(sinq_in),.cosq_in(cosq_in),"+"\n")
#-------------------------------------------------------------------------------
rneafpx_file.write("      // xform_in"+"\n")
mat_str = vw.makeXformInputPortAssignment(xform_bools)
rneafpx_file.write(mat_str)
#-------------------------------------------------------------------------------
rneafpx_file.write("      // mcross boolean"+"\n")
rneafpx_file.write("      .mcross(mcross),"+"\n")
rneafpx_file.write("      // stage booleans"+"\n")
rneafpx_file.write("      .s1_bool(s1_bool),.s2_bool(s2_bool),.s3_bool(s3_bool),"+"\n")
rneafpx_file.write("      // stage 1 inputs"+"\n")
rneafpx_file.write("      .s1r2_in_AX(s1r2_in_AX),.s1r2_in_AY(s1r2_in_AY),.s1r2_in_AZ(s1r2_in_AZ),.s1r2_in_LX(s1r2_in_LX),.s1r2_in_LY(s1r2_in_LY),.s1r2_in_LZ(s1r2_in_LZ),"+"\n")
rneafpx_file.write("      .s1r3_in(s1r3_in),"+"\n")
rneafpx_file.write("      .s1r4_in_AX(s1r4_in_AX),.s1r4_in_AY(s1r4_in_AY),.s1r4_in_AZ(s1r4_in_AZ),.s1r4_in_LX(s1r4_in_LX),.s1r4_in_LY(s1r4_in_LY),.s1r4_in_LZ(s1r4_in_LZ),"+"\n")
rneafpx_file.write("      .s1r5_in(s1r5_in),"+"\n")
rneafpx_file.write("      // stage 2 inputs"+"\n")
rneafpx_file.write("      .s2r3_in_AX(s2r3_in_AX),.s2r3_in_AY(s2r3_in_AY),.s2r3_in_AZ(s2r3_in_AZ),.s2r3_in_LX(s2r3_in_LX),.s2r3_in_LY(s2r3_in_LY),.s2r3_in_LZ(s2r3_in_LZ),"+"\n")
rneafpx_file.write("      .s2r4_in(s2r4_in),"+"\n")
rneafpx_file.write("      .s2r5_in_AX(s2r5_in_AX),.s2r5_in_AY(s2r5_in_AY),.s2r5_in_AZ(s2r5_in_AZ),.s2r5_in_LX(s2r5_in_LX),.s2r5_in_LY(s2r5_in_LY),.s2r5_in_LZ(s2r5_in_LZ),"+"\n")
rneafpx_file.write("      .s2r6_in(s2r6_in),"+"\n")
rneafpx_file.write("      // stage 3 inputs"+"\n")
rneafpx_file.write("      .s3r2_in_AX(s3r2_in_AX),.s3r2_in_AY(s3r2_in_AY),.s3r2_in_AZ(s3r2_in_AZ),.s3r2_in_LX(s3r2_in_LX),.s3r2_in_LY(s3r2_in_LY),.s3r2_in_LZ(s3r2_in_LZ),"+"\n")
rneafpx_file.write("      .s3r3_in_AX(s3r3_in_AX),.s3r3_in_AY(s3r3_in_AY),.s3r3_in_AZ(s3r3_in_AZ),.s3r3_in_LX(s3r3_in_LX),.s3r3_in_LY(s3r3_in_LY),.s3r3_in_LZ(s3r3_in_LZ),"+"\n")
rneafpx_file.write("      .s3r4_in_AX(s3r4_in_AX),.s3r4_in_AY(s3r4_in_AY),.s3r4_in_AZ(s3r4_in_AZ),.s3r4_in_LX(s3r4_in_LX),.s3r4_in_LY(s3r4_in_LY),.s3r4_in_LZ(s3r4_in_LZ),"+"\n")
rneafpx_file.write("      .s3r5_in_AX(s3r5_in_AX),.s3r5_in_AY(s3r5_in_AY),.s3r5_in_AZ(s3r5_in_AZ),.s3r5_in_LX(s3r5_in_LX),.s3r5_in_LY(s3r5_in_LY),.s3r5_in_LZ(s3r5_in_LZ),"+"\n")
rneafpx_file.write("      // stage 1 outputs"+"\n")
rneafpx_file.write("      .s1r3_out_AX(s1r3_out_AX),.s1r3_out_AY(s1r3_out_AY),.s1r3_out_AZ(s1r3_out_AZ),.s1r3_out_LX(s1r3_out_LX),.s1r3_out_LY(s1r3_out_LY),.s1r3_out_LZ(s1r3_out_LZ),"+"\n")
rneafpx_file.write("      .s1r4_out(s1r4_out),"+"\n")
rneafpx_file.write("      .s1r5_out_AX(s1r5_out_AX),.s1r5_out_AY(s1r5_out_AY),.s1r5_out_AZ(s1r5_out_AZ),.s1r5_out_LX(s1r5_out_LX),.s1r5_out_LY(s1r5_out_LY),.s1r5_out_LZ(s1r5_out_LZ),"+"\n")
rneafpx_file.write("      .s1r6_out(s1r6_out),"+"\n")
rneafpx_file.write("      // stage 2 outputs"+"\n")
rneafpx_file.write("      .s2r2_out_AX(s2r2_out_AX),.s2r2_out_AY(s2r2_out_AY),.s2r2_out_AZ(s2r2_out_AZ),.s2r2_out_LX(s2r2_out_LX),.s2r2_out_LY(s2r2_out_LY),.s2r2_out_LZ(s2r2_out_LZ),"+"\n")
rneafpx_file.write("      .s2r3_out_AX(s2r3_out_AX),.s2r3_out_AY(s2r3_out_AY),.s2r3_out_AZ(s2r3_out_AZ),.s2r3_out_LX(s2r3_out_LX),.s2r3_out_LY(s2r3_out_LY),.s2r3_out_LZ(s2r3_out_LZ),"+"\n")
rneafpx_file.write("      .s2r4_out_AX(s2r4_out_AX),.s2r4_out_AY(s2r4_out_AY),.s2r4_out_AZ(s2r4_out_AZ),.s2r4_out_LX(s2r4_out_LX),.s2r4_out_LY(s2r4_out_LY),.s2r4_out_LZ(s2r4_out_LZ),"+"\n")
rneafpx_file.write("      .s2r5_out_AX(s2r5_out_AX),.s2r5_out_AY(s2r5_out_AY),.s2r5_out_AZ(s2r5_out_AZ),.s2r5_out_LX(s2r5_out_LX),.s2r5_out_LY(s2r5_out_LY),.s2r5_out_LZ(s2r5_out_LZ),"+"\n")
rneafpx_file.write("      // stage 3 outputs"+"\n")
rneafpx_file.write("      .s3r1_out_AX(s3r1_out_AX),.s3r1_out_AY(s3r1_out_AY),.s3r1_out_AZ(s3r1_out_AZ),.s3r1_out_LX(s3r1_out_LX),.s3r1_out_LY(s3r1_out_LY),.s3r1_out_LZ(s3r1_out_LZ),"+"\n")
rneafpx_file.write("      .s3r2_out_AX(s3r2_out_AX),.s3r2_out_AY(s3r2_out_AY),.s3r2_out_AZ(s3r2_out_AZ),.s3r2_out_LX(s3r2_out_LX),.s3r2_out_LY(s3r2_out_LY),.s3r2_out_LZ(s3r2_out_LZ),"+"\n")
rneafpx_file.write("      .s3r3_out_AX(s3r3_out_AX),.s3r3_out_AY(s3r3_out_AY),.s3r3_out_AZ(s3r3_out_AZ),.s3r3_out_LX(s3r3_out_LX),.s3r3_out_LY(s3r3_out_LY),.s3r3_out_LZ(s3r3_out_LZ),"+"\n")
#-------------------------------------------------------------------------------
rneafpx_file.write("      // xform_out"+"\n")
mat_str = vw.makeXformOutputPortAssignment(xform_bools)
rneafpx_file.write(mat_str)
#-------------------------------------------------------------------------------
rneafpx_file.write("      );"+"\n")
rneafpx_file.write("\n")
rneafpx_file.write("   //---------------------------------------------------------------------------"+"\n")
rneafpx_file.write("   // outputs"+"\n")
rneafpx_file.write("   //---------------------------------------------------------------------------"+"\n")
rneafpx_file.write("   // v"+"\n")
rneafpx_file.write("   assign v_curr_vec_out_AX = s3r3_out_AX;"+"\n")
rneafpx_file.write("   assign v_curr_vec_out_AY = s3r3_out_AY;"+"\n")
rneafpx_file.write("   assign v_curr_vec_out_AZ = s3r3_out_AZ;"+"\n")
rneafpx_file.write("   assign v_curr_vec_out_LX = s3r3_out_LX;"+"\n")
rneafpx_file.write("   assign v_curr_vec_out_LY = s3r3_out_LY;"+"\n")
rneafpx_file.write("   assign v_curr_vec_out_LZ = s3r3_out_LZ;"+"\n")
rneafpx_file.write("   // a"+"\n")
rneafpx_file.write("   assign a_curr_vec_out_AX = s3r2_out_AX;"+"\n")
rneafpx_file.write("   assign a_curr_vec_out_AY = s3r2_out_AY;"+"\n")
rneafpx_file.write("   assign a_curr_vec_out_AZ = s3r2_out_AZ;"+"\n")
rneafpx_file.write("   assign a_curr_vec_out_LX = s3r2_out_LX;"+"\n")
rneafpx_file.write("   assign a_curr_vec_out_LY = s3r2_out_LY;"+"\n")
rneafpx_file.write("   assign a_curr_vec_out_LZ = s3r2_out_LZ;"+"\n")
rneafpx_file.write("   // f"+"\n")
rneafpx_file.write("   assign f_curr_vec_out_AX = s3r1_out_AX;"+"\n")
rneafpx_file.write("   assign f_curr_vec_out_AY = s3r1_out_AY;"+"\n")
rneafpx_file.write("   assign f_curr_vec_out_AZ = s3r1_out_AZ;"+"\n")
rneafpx_file.write("   assign f_curr_vec_out_LX = s3r1_out_LX;"+"\n")
rneafpx_file.write("   assign f_curr_vec_out_LY = s3r1_out_LY;"+"\n")
rneafpx_file.write("   assign f_curr_vec_out_LZ = s3r1_out_LZ;"+"\n")
#-------------------------------------------------------------------------------
rneafpx_file.write("\n")
#-------------------------------------------------------------------------------
rneafpx_file.write("endmodule"+"\n")
#-------------------------------------------------------------------------------

# Close file
rneafpx_file.close()
